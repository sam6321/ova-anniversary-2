{"version":3,"sources":["utils.ts","input.ts","globals.ts","update.ts","particles.ts","particles_enemy_hit.ts","enemy.ts","projectile.ts","player.ts","camera.ts","collision.ts","overlay.tsx","arrow.tsx","App.tsx","people/tyler.tsx","people/cal.tsx","people/aeg.tsx","people/any.tsx","people/blocky.tsx","people/dash.tsx","people/mark.tsx","people/mute.tsx","people/neel.tsx","people/snow.tsx","people/stick.tsx","people/supa.tsx","people/vase.tsx","people/deelon.tsx","serviceWorker.js","index.js"],"names":["defaultValue","x","removeArray","array","element","index","indexOf","splice","Action","Range","start","end","this","set","other","a","THREE","lerp","randFloat","randInt","randomIndex","length","KeyState","press","release","frame","state","down","Input","domElement","mapping","mouse","mouseNDC","size","keys","Map","events","onKeyDown","e","push","key","toLowerCase","onKeyUp","onMouseButtonDown","button","onMouseButtonUp","onMouseMoved","clamp","clientX","width","clientY","height","updateNDC","addEventListener","removeEventListener","get","up","pressed","released","event","action","undefined","update","window","innerWidth","y","innerHeight","Globals","pause","Update","list","destroyed","time","dt","UpdateList","root","camera","input","grid","globals","objects","destroyList","constructor","params","object","dispose","Particle","geometry","translation","colour","rotation","scale","active","translationAttribute","colourAttribute","rotationAttribute","scaleAttribute","timeAttribute","activeAttribute","getAttribute","setXYZ","z","needsUpdate","r","g","b","setX","ParticleGeometry","count","particles","maxInstancedCount","setAttribute","Float32Array","setUsage","i","ParticleMesh","particleGeometry","particleMaterial","frustumCulled","simulate","alive","len","box","BoxParticleGeometry","setIndex","getIndex","BoxParticleMaterial","p","vertexShader","fragmentShader","Object","assign","defaultCount","defaultSpeed","defaultLifetime","defaultSpawnDelay","tempQuat","ParticlesEnemyHit","position","normal","options","particleStates","particleMesh","spawn","die","addScaledVector","velocity","countRange","speedRange","lifetimeRange","spawnDelayRange","spread","speed","lifetime","spawnDelay","colourObject","degToRad","randomInt","particle","setFromAxisAngle","clone","multiplyScalar","random","applyQuaternion","angleTo","copy","add","remove","material","console","log","LabelPositioner","div","labelChangeTime","quotes","offsets","lastPosition","rect","_text","lastOffsetInfo","finishTime","style","color","userSelect","getBoundingClientRect","pos","Math","floor","mapLinear","substring","text","now","period","innerText","vector","offset","project","updatePositionInternal","isComplete","newFinishTime","used","setText","getScrollText","updateRect","force","equals","halfWidth","halfHeight","transform","computeBoundingSphere","bigBox","AttackMode","projectileGeometry","projectileMaterial","fullHealthColour","noHealthColour","flashColour","tempQuat1","tempVec1","tempVec2","defaultLabelChangeTime","defaultSwitchAttackTime","Enemy","texture","player","labelContainer","nodes","mesh","switchAttacks","collider","startHealth","_health","xRotateSpeed","yRotateSpeed","projectile","lastFire","fireDelay","fireDelayRound","roundNumShots","fireDelayBurst","burstNumShots","burstDelayBetweenShots","burstLastShotFired","burstShotsFired","shootDistance","snipeShootDistance","fireDelaySnipe","clumpAmount","fireDelayClump","flashStart","flashEnd","boss","attackMode","Direct","nextSwitchAttack","switchAttackTime","labelLeft","labelRight","soffset","PI","coffset","health","startingAttack","randomStartingAttack","RandomLength","onDie","document","createElement","map","create","boundingSphere","radius","append","destroy","removeChild","damage","max","updateColour","onEnemyKill","rotateX","rotateY","updateAttack","subVectors","normalize","cos","sin","updatePosition","direction","Projectile","killed","createProjectile","minSpeed","maxSpeed","destroyable","canDamagePlayer","startAngle","relativeVelocity","distanceTo","sub","circles","circle","center","intersectsSphere","amount","setLength","Length","d","Snipe","distanceToSquared","updateDirectAttack","Round","updateRoundAttack","Burst","updateBurstAttack","updateSnipeAttack","Clump","updateClumpAttack","lerpHSL","f","tempQuaternion1","canDestroyProjectile","canDamageNPC","acceleration","destroyDistance","lookAt","hit","negate","clampLength","shouldDestroy","search","spawnParticles","Player","PlayerMovement","movementSpeed","dragSpeed","isDown","left","right","PlayerWeapon","mouseGround","fire","pointAtMouse","playerMovement","playerWeapon","divideScalar","CameraMovement","target","cameraObjectInterpTarget","mouseInterpTarget","cameraLerpSpeed","mouseLerpSpeed","startY","hash3","same","has","getGridKeys","lowX","highX","lowY","highY","lowZ","highZ","GridObject","Set","_position","_radius","changed","Grid","cellSize","objectsUpdated","cellMap","gridObject","link","delete","unlink","updateInternal","hits","radiusSq","contents","c","len2","objectRadiusSq","dx","dy","dz","updatedList","newKeys","clear","Overlay","ref","show","children","onCloseClicked","props","setRef","prevProps","prevState","snapshot","scrollYTo","setState","className","onClick","contentClassName","smoothScrolling","React","Component","Arrow","model","fadeIn","fadeTime","targetPosition","targetQuaternion","transparent","setScalar","shortest","Infinity","node","quaternion","opacity","fadeOpacity","min","slerp","visible","people","img","message","src","controls","alt","autoPlay","loop","deelon","tempRay1","App","scene","renderer","antialias","body","altfire","updateList","lightAmbient","effectComposer","EffectComposer","renderPass","RenderPass","bloomPass","UnrealBloomPass","aaPass","SMAAPass","groundPlane","cameraMovement","quoteMap","WeakMap","labelDiv","arrowModel","loadedTextures","loading","maxToLoad","loaded","started","animate","requestAnimationFrame","origin","setFromMatrixPosition","matrixWorld","unproject","intersectPlane","performance","delta","render","setSize","aspect","updateProjectionMatrix","clickToStart","init","enemy","setTimeout","newState","load","shutdown","gltfLoader","GLTFLoader","textureLoader","traverse","Array","isArray","m","onLoadComplete","endsWith","video","display","autoplay","crossOrigin","onloadeddata","appendChild","addPass","setClearColor","positionsUsedSoFar","iterations","theta","phi","setFromSphericalCoords","some","created","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22c572e2.chunk.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nexport function defaultValue<T>(x: T | undefined, defaultValue: T) {\r\n    return typeof x === 'undefined' ? defaultValue : x;\r\n}\r\n\r\nexport function removeArray<T>(array: T[], element: T): boolean {\r\n    const index = array.indexOf(element);\r\n    if(index >= 0) {\r\n        array.splice(index, 1);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport class Range {\r\n\r\n    start = 0;\r\n    end = 0;\r\n\r\n    constructor(start: number, end: number) {\r\n        this.set(start, end);\r\n    }\r\n\r\n    set(start: number, end: number) {\r\n        this.start = start;\r\n        this.end = end;\r\n        return this;\r\n    }\r\n\r\n    copy(other: Range) {\r\n        return this.set(other.start, other.end);\r\n    }\r\n\r\n    clone() {\r\n        return new Range(this.start, this.end);\r\n    }\r\n\r\n    get size() {\r\n        return this.end - this.start;\r\n    }\r\n\r\n    lerp(a: number) {\r\n        return THREE.Math.lerp(this.start, this.end, a);\r\n    }\r\n\r\n    random() {\r\n        return THREE.Math.randFloat(this.start, this.end);\r\n    }\r\n\r\n    randomInt() {\r\n        return THREE.Math.randInt(this.start, this.end);\r\n    }\r\n}\r\n\r\nexport function randomElement<T>(array: readonly T[]) {\r\n    return array[randomIndex(array)];\r\n}\r\n\r\nexport function randomIndex(array: readonly any[]) {\r\n    return THREE.Math.randInt(0, array.length - 1);\r\n}","import * as THREE from \"three\";\r\n\r\nexport enum Action {\r\n    up,\r\n    left,\r\n    right,\r\n    down,\r\n    fire,\r\n    altfire\r\n}\r\n\r\nexport type KeyMapping = {\r\n    [key: string]: Action;\r\n};\r\n\r\nclass KeyState {\r\n    private press = 0;\r\n    private release = 0;\r\n\r\n    get down() {\r\n        return this.press > this.release;\r\n    }\r\n\r\n    get up() {\r\n        return !this.down;\r\n    }\r\n\r\n    pressed(frame: number) {\r\n        return this.press === frame;\r\n    }\r\n\r\n    released(frame: number) {\r\n        return this.release === frame;\r\n    }\r\n\r\n    update(state: boolean, frame: number) {\r\n        if(state) {\r\n            this.press = frame;\r\n        }\r\n        else {\r\n            this.release = frame;\r\n        }\r\n    }\r\n}\r\n\r\ninterface KeyEvent {\r\n    key: string;\r\n    state: boolean;\r\n}\r\n\r\nexport class Input {\r\n\r\n    public readonly domElement: HTMLElement;\r\n\r\n    public readonly mouse = new THREE.Vector3();\r\n    public readonly mouseNDC = new THREE.Vector3();\r\n\r\n    private readonly size = new THREE.Vector2();\r\n\r\n    private readonly mapping: KeyMapping;\r\n\r\n    private frame = 0;\r\n    private keys = new Map<Action, KeyState>();\r\n    private readonly events: KeyEvent[] = [];\r\n\r\n    constructor(domElement: HTMLElement, mapping: KeyMapping) {\r\n        this.mapping = mapping;\r\n        this.domElement = domElement;\r\n\r\n        domElement.addEventListener(\"keydown\", this.onKeyDown, true);\r\n        domElement.addEventListener(\"keyup\", this.onKeyUp, true);\r\n        domElement.addEventListener(\"mousedown\", this.onMouseButtonDown, true);\r\n        domElement.addEventListener(\"mouseup\", this.onMouseButtonUp, true);\r\n        domElement.addEventListener(\"mousemove\", this.onMouseMoved, true);\r\n    }\r\n\r\n    dispose() {\r\n        this.domElement.removeEventListener(\"keydown\", this.onKeyDown);\r\n        this.domElement.removeEventListener(\"keyup\", this.onKeyUp);\r\n        this.domElement.removeEventListener(\"mousedown\", this.onMouseButtonDown);\r\n        this.domElement.removeEventListener(\"mouseup\", this.onMouseButtonUp);\r\n        this.domElement.removeEventListener(\"mousemove\", this.onMouseMoved);\r\n    }\r\n\r\n    isDown(key: Action) {\r\n        return this.get(key).down;\r\n    }\r\n\r\n    isUp(key: Action) {\r\n        return this.get(key).up;\r\n    }\r\n\r\n    isPressed(key: Action) {\r\n        return this.get(key).pressed(this.frame);\r\n    }\r\n\r\n    isReleased(key: Action) {\r\n        return this.get(key).released(this.frame);\r\n    }\r\n\r\n    update() {\r\n        this.frame++;\r\n        for(const event of this.events) {\r\n            const action = this.mapping[event.key];\r\n            if(action !== undefined) {\r\n                this.get(action).update(event.state, this.frame);\r\n            }\r\n        }\r\n        this.events.length = 0;\r\n    }\r\n\r\n    setSize(width: number, height: number) {\r\n        this.size.set(width, height);\r\n        this.updateNDC();\r\n    }\r\n\r\n    private get(key: Action): KeyState {\r\n        let state = this.keys.get(key);\r\n        if(!state) {\r\n            state = new KeyState();\r\n            this.keys.set(key, state);\r\n        }\r\n        return state;\r\n    }\r\n\r\n    private updateNDC() {\r\n        this.mouseNDC.set(\r\n            THREE.Math.clamp((this.mouse.x / window.innerWidth) * 2 - 1, -1, 1),\r\n            THREE.Math.clamp((this.mouse.y / window.innerHeight) * 2 + 1, -1, 1),\r\n            0\r\n        );\r\n    }\r\n\r\n    private readonly onKeyDown = (e: KeyboardEvent) => {\r\n        this.events.push({key: e.key.toLowerCase(), state: true});\r\n    };\r\n\r\n    private readonly onKeyUp = (e: KeyboardEvent) => {\r\n        this.events.push({key: e.key.toLowerCase(), state: false});\r\n    };\r\n\r\n    private readonly onMouseButtonDown = (e: MouseEvent) => {\r\n        this.events.push({key: `mouse${e.button}`, state: true});\r\n    };\r\n\r\n    private readonly onMouseButtonUp = (e: MouseEvent) => {\r\n        this.events.push({key: `mouse${e.button}`, state: false});\r\n    };\r\n\r\n    private readonly onMouseMoved = (e: MouseEvent) => {\r\n        this.mouse.set(\r\n            THREE.Math.clamp(e.clientX, -this.size.width, this.size.width),\r\n            THREE.Math.clamp(-e.clientY, -this.size.height, this.size.height),\r\n            0\r\n        );\r\n        this.updateNDC();\r\n    };\r\n}","export class Globals {\r\n    pause = false; // When true, enemies don't shoot and the player can't move\r\n}","import * as THREE from 'three';\r\nimport {Input} from \"./input\";\r\nimport {Grid} from \"./collision\";\r\nimport {removeArray} from \"./utils\";\r\nimport {Globals} from \"./globals\";\r\n\r\nexport class Update {\r\n\r\n    public readonly list: UpdateList;\r\n    public destroyed = false;\r\n\r\n    constructor(list: UpdateList) {\r\n        this.list = list;\r\n    }\r\n\r\n    /**\r\n     * Called when removed from the update list\r\n     * @param root The root object to remove any threejs objects from.\r\n     */\r\n    dispose(): void {}\r\n\r\n    /**\r\n     * @param time Time\r\n     * @param dt Delta time\r\n     * @returns True to destroy object, false to keep object alive.\r\n     */\r\n    update(time: number, dt: number): void {}\r\n}\r\n\r\ntype UpdateConstructor = new (list: UpdateList, ...params: any[]) => Update;\r\ntype ConstructorParams<T> = T extends new(list: UpdateList, ...params: infer X) => any ? X : never;\r\ntype ConstructorResult<T> = T extends new (list: UpdateList, ...params: any[]) => infer X ? X : never;\r\n\r\nexport class UpdateList {\r\n    public readonly root: THREE.Object3D;\r\n    public readonly camera: THREE.Camera;\r\n    public readonly input: Input;\r\n    public readonly grid: Grid;\r\n    public readonly globals = new Globals();\r\n    public time = 0;\r\n    public dt = 0;\r\n\r\n    private readonly objects: Update[] = [];\r\n    private readonly destroyList: Update[] = [];\r\n\r\n    constructor(root: THREE.Object3D, camera: THREE.Camera, input: Input, grid: Grid) {\r\n        this.root = root;\r\n        this.camera = camera;\r\n        this.input = input;\r\n        this.grid = grid;\r\n    }\r\n\r\n    create<T extends UpdateConstructor>(constructor: T, ...params: ConstructorParams<T>): ConstructorResult<T> {\r\n        const object = new constructor(this, ...params);\r\n        this.objects.push(object);\r\n        return object as ConstructorResult<T>;\r\n    }\r\n\r\n    remove(object: Update) {\r\n        this.destroyList.push(object);\r\n        object.destroyed = true;\r\n        return this;\r\n    }\r\n\r\n    update(time: number, dt: number) {\r\n        this.time = time;\r\n        this.dt = dt;\r\n\r\n        for(const update of this.objects) {\r\n            if(!update.destroyed) {\r\n                update.update(time, dt);\r\n            }\r\n        }\r\n\r\n        for(const update of this.destroyList) {\r\n            update.dispose();\r\n            removeArray(this.objects, update);\r\n        }\r\n        this.destroyList.length = 0;\r\n    }\r\n}","import * as THREE from 'three';\r\n\r\nexport const particleVertexShared = `\r\nattribute vec3 translation;\r\nattribute vec3 colour;\r\nattribute float rotation;\r\nattribute float scale;\r\nattribute float time;\r\nattribute float active;\r\n\r\n/**\r\n * Rotate a 2d position by the given angle.\r\n */\r\nvec2 rotate(vec2 p, float angle) {\r\n    float sr = sin(angle);\r\n    float cr = cos(angle);\r\n    return vec2(p.x * cr - p.y * sr, p.x * sr + p.y * cr);\r\n}\r\n\r\n/**\r\n * Apply a translation, rotation, and scale to a point.\r\n */\r\nvec3 applyTransforms(vec3 p, vec3 t, float r, float s) {\r\n    // Rotate (only around z axis), then scale, then translate\r\n    return vec3(rotate(p.xy, r), p.z) * s + t;\r\n}\r\n`;\r\n\r\nexport class Particle {\r\n    readonly translation = new THREE.Vector3();\r\n    readonly colour = new THREE.Color(\"white\");\r\n    rotation = 0;\r\n    scale = 1;\r\n    time = 0;\r\n    active = false;\r\n    readonly index: number;\r\n\r\n    private readonly translationAttribute: THREE.BufferAttribute;\r\n    private readonly colourAttribute: THREE.BufferAttribute;\r\n    private readonly rotationAttribute: THREE.BufferAttribute;\r\n    private readonly scaleAttribute: THREE.BufferAttribute;\r\n    private readonly timeAttribute: THREE.BufferAttribute;\r\n    private readonly activeAttribute: THREE.BufferAttribute;\r\n\r\n    constructor(index: number, geometry: ParticleGeometry) {\r\n        this.index = index;\r\n        this.translationAttribute = geometry.getAttribute(\"translation\") as THREE.BufferAttribute;\r\n        this.colourAttribute = geometry.getAttribute(\"colour\") as THREE.BufferAttribute;\r\n        this.rotationAttribute = geometry.getAttribute(\"rotation\") as THREE.BufferAttribute;\r\n        this.scaleAttribute = geometry.getAttribute(\"scale\") as THREE.BufferAttribute;\r\n        this.timeAttribute = geometry.getAttribute(\"time\") as THREE.BufferAttribute;\r\n        this.activeAttribute = geometry.getAttribute(\"active\") as THREE.BufferAttribute;\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        const {translation, colour, rotation, scale, time, index, active,\r\n            translationAttribute, colourAttribute, rotationAttribute, scaleAttribute, timeAttribute, activeAttribute} = this;\r\n\r\n        translationAttribute.setXYZ(index, translation.x, translation.y, translation.z);\r\n        translationAttribute.needsUpdate = true;\r\n\r\n        colourAttribute.setXYZ(index, colour.r, colour.g, colour.b);\r\n        colourAttribute.needsUpdate = true;\r\n\r\n        rotationAttribute.setX(index, rotation);\r\n        rotationAttribute.needsUpdate = true;\r\n\r\n        scaleAttribute.setX(index, scale);\r\n        scaleAttribute.needsUpdate = true;\r\n\r\n        timeAttribute.setX(index, time);\r\n        timeAttribute.needsUpdate = true;\r\n\r\n        activeAttribute.setX(index, active ? 1 : 0);\r\n        activeAttribute.needsUpdate = true;\r\n    }\r\n}\r\n\r\nexport class ParticleGeometry extends THREE.InstancedBufferGeometry {\r\n\r\n    readonly particles: readonly Particle[];\r\n\r\n    constructor(count: number) {\r\n        super();\r\n\r\n        this.maxInstancedCount = count;\r\n        this.setAttribute(\"translation\", new THREE.InstancedBufferAttribute(new Float32Array(count * 3), 3).setUsage(THREE.DynamicDrawUsage));\r\n        this.setAttribute(\"colour\", new THREE.InstancedBufferAttribute(new Float32Array(count * 3), 3).setUsage(THREE.DynamicDrawUsage));\r\n        this.setAttribute(\"rotation\", new THREE.InstancedBufferAttribute(new Float32Array(count * 4), 4).setUsage(THREE.DynamicDrawUsage));\r\n        this.setAttribute(\"scale\", new THREE.InstancedBufferAttribute(new Float32Array(count), 1).setUsage(THREE.DynamicDrawUsage));\r\n        this.setAttribute(\"time\", new THREE.InstancedBufferAttribute(new Float32Array(count), 1).setUsage(THREE.DynamicDrawUsage));\r\n        this.setAttribute(\"active\", new THREE.InstancedBufferAttribute(new Float32Array(count), 1).setUsage(THREE.DynamicDrawUsage));\r\n\r\n        const particles = [];\r\n        for(let i = 0; i < count; i++) {\r\n            particles.push(new Particle(i, this));\r\n        }\r\n        this.particles = particles;\r\n    }\r\n}\r\n\r\nexport class ParticleMesh extends THREE.Mesh {\r\n\r\n    private start = 0;\r\n\r\n    constructor(particleGeometry: ParticleGeometry, particleMaterial: THREE.Material) {\r\n        super(particleGeometry, particleMaterial);\r\n        this.frustumCulled = false;\r\n    }\r\n\r\n    get particles() {\r\n        return (this.geometry as ParticleGeometry).particles;\r\n    }\r\n\r\n    simulate(time: number, dt: number, simulate: (p: Particle, i: number, start: number) => boolean) {\r\n        const {particles} = this;\r\n        if(this.start === 0) {\r\n            this.start = time;\r\n        }\r\n        let alive = false;\r\n        for(let i = 0, len = particles.length; i < len; i++) {\r\n            alive = simulate(particles[i], i, this.start) || alive;\r\n        }\r\n        return alive;\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {Update, UpdateList} from \"./update\";\r\nimport {defaultValue, Range} from './utils';\r\nimport {Particle, ParticleGeometry, ParticleMesh, particleVertexShared} from \"./particles\";\r\n\r\n\r\nconst box = new THREE.BoxBufferGeometry(0.5, 0.5, 0.5);\r\nclass BoxParticleGeometry extends ParticleGeometry {\r\n    constructor(count: number) {\r\n        super(count);\r\n        this.setAttribute(\"position\", box.getAttribute(\"position\"));\r\n        this.setIndex(box.getIndex());\r\n    }\r\n}\r\n\r\nclass BoxParticleMaterial extends THREE.ShaderMaterial {\r\n    static vertexShader = /*glsl*/`\r\n${particleVertexShared}\r\n\r\nvarying vec3 vColour;\r\n\r\nvoid main() {\r\n    if(active == 0.0) {\r\n        gl_Position = vec4(0.0);\r\n        return;\r\n    }\r\n    \r\n    vec3 p = applyTransforms(position, translation, -rotation, scale);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(p, 1.0);\r\n    vColour = colour;\r\n}\r\n`;\r\n\r\n    static fragmentShader = /*glsl*/`\r\nvarying vec3 vColour;\r\n\r\nvoid main() {\r\n    if(gl_FragCoord == vec4(0.0)) {\r\n        discard;\r\n    }\r\n\r\n    gl_FragColor = vec4(vColour, 1.0);\r\n}\r\n`;\r\n\r\n    constructor(params: THREE.ShaderMaterialParameters={}) {\r\n        const p: THREE.ShaderMaterialParameters = {\r\n            vertexShader: BoxParticleMaterial.vertexShader,\r\n            fragmentShader: BoxParticleMaterial.fragmentShader,\r\n        };\r\n        super(Object.assign(p, params));\r\n    }\r\n}\r\n\r\nexport interface ParticlesEnemyHitOptions {\r\n    count?: Range;\r\n    spread?: number;\r\n    speed?: Range;\r\n    lifetime?: Range;\r\n    spawnDelay?: Range;\r\n    colour?: THREE.Color | number | string;\r\n}\r\n\r\nconst defaultCount = new Range(7, 12);\r\nconst defaultSpeed = new Range(30, 50);\r\nconst defaultLifetime = new Range(1, 2);\r\nconst defaultSpawnDelay = new Range(0.01, 0.02);\r\n\r\ninterface EnemyHitParticle {\r\n    velocity: THREE.Vector3;\r\n    spawn: number;\r\n    die: number;\r\n}\r\n\r\nconst tempQuat = new THREE.Quaternion();\r\nconst up = new THREE.Vector3(0, 1, 0);\r\n\r\nexport class ParticlesEnemyHit extends Update {\r\n\r\n    private readonly particleStates: EnemyHitParticle[] = [];\r\n    private readonly particleMesh: ParticleMesh;\r\n\r\n    constructor(list: UpdateList, position: THREE.Vector3, normal: THREE.Vector3, options?: ParticlesEnemyHitOptions) {\r\n        super(list);\r\n\r\n        let countRange = defaultCount;\r\n        let speedRange = defaultSpeed;\r\n        let lifetimeRange = defaultLifetime;\r\n        let spawnDelayRange = defaultSpawnDelay;\r\n        let spread = 65;\r\n        let colour: THREE.Color | string | number = 0xFFFFFF;\r\n\r\n        if(options) {\r\n            countRange = defaultValue(options.count, countRange);\r\n            speedRange = defaultValue(options.speed, speedRange);\r\n            lifetimeRange = defaultValue(options.lifetime, lifetimeRange);\r\n            spawnDelayRange = defaultValue(options.spawnDelay, spawnDelayRange);\r\n            spread = defaultValue(options.spread, spread);\r\n            colour = defaultValue(options.colour, colour);\r\n        }\r\n\r\n        const colourObject = new THREE.Color(colour);\r\n\r\n        spread = THREE.Math.degToRad(spread) / 2.0;\r\n\r\n        const count = countRange.randomInt();\r\n        this.particleMesh = new ParticleMesh(\r\n            new BoxParticleGeometry(count),\r\n            new BoxParticleMaterial()\r\n        );\r\n        for(const particle of this.particleMesh.particles) {\r\n            tempQuat.setFromAxisAngle(up, THREE.Math.randFloat(-spread, spread));\r\n            const velocity = normal\r\n                .clone()\r\n                .multiplyScalar(speedRange.random())\r\n                .applyQuaternion(tempQuat);\r\n            const spawn = list.time + spawnDelayRange.random();\r\n            const die = spawn + lifetimeRange.random();\r\n            this.particleStates.push({velocity, spawn, die});\r\n            particle.rotation = up.angleTo(velocity);\r\n            particle.translation.copy(position);\r\n            particle.active = false;\r\n            particle.colour.copy(colourObject);\r\n        }\r\n\r\n        this.list.root.add(this.particleMesh);\r\n    }\r\n\r\n    dispose() {\r\n        this.list.root.remove(this.particleMesh);\r\n        this.particleMesh.geometry.dispose();\r\n        (this.particleMesh.material as BoxParticleMaterial).dispose();\r\n        console.log(\"Destroying particles\");\r\n    }\r\n\r\n    private readonly simulate = (p: Particle, i: number, start: number) => {\r\n        const state = this.particleStates[i];\r\n        const active = p.active;\r\n        p.active = this.list.time >= state.spawn && this.list.time <= state.die;\r\n        if(p.active) {\r\n            p.translation.addScaledVector(state.velocity, this.list.dt);\r\n        }\r\n        if(p.active || (active && !p.active)) {\r\n            p.update();\r\n        }\r\n\r\n        return this.list.time <= state.die;\r\n    };\r\n\r\n    update(time: number, dt: number): void {\r\n        if(!this.particleMesh.simulate(time, dt, this.simulate)) {\r\n            this.list.remove(this);\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {Update, UpdateList} from \"./update\";\r\nimport {GridObject} from \"./collision\";\r\nimport {defaultValue, randomElement, randomIndex, Range, removeArray} from \"./utils\";\r\nimport {Player} from \"./player\";\r\nimport {Projectile, ProjectileOptions} from \"./projectile\";\r\nimport {ParticlesEnemyHit} from \"./particles_enemy_hit\";\r\n\r\ninterface OffsetInfo {\r\n    offset: THREE.Vector3;\r\n    used: boolean;\r\n}\r\n\r\nclass LabelPositioner {\r\n\r\n    public readonly div: HTMLDivElement;\r\n    private readonly position = new THREE.Vector3();\r\n    private readonly lastPosition = new THREE.Vector3();\r\n    private rect: DOMRect | ClientRect;\r\n    private readonly labelChangeTime: Range;\r\n    private readonly quotes: readonly string[];\r\n    private readonly offsets: readonly OffsetInfo[];\r\n\r\n    private _text = \"\";\r\n    private start = 0;\r\n    private end = 0;\r\n    private lastOffsetInfo?: OffsetInfo;\r\n\r\n    private finishTime = 0;\r\n\r\n    constructor(div: HTMLDivElement, labelChangeTime: Range, quotes: readonly string[], offsets: readonly OffsetInfo[]) {\r\n        this.div = div;\r\n        this.labelChangeTime = labelChangeTime;\r\n        this.quotes = quotes;\r\n        this.offsets = offsets;\r\n        div.style.position = \"absolute\";\r\n        div.style.color = \"white\";\r\n        div.style.userSelect = \"none\";\r\n        this.rect = div.getBoundingClientRect();\r\n    }\r\n\r\n    getScrollText(time: number) {\r\n        const pos = Math.floor(THREE.Math.mapLinear(time, this.start, this.end, 0, this._text.length + 1));\r\n        return this._text.substring(0, pos);\r\n    }\r\n\r\n    isComplete(time: number) {\r\n        return time >= this.end;\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    setText(text: string, now: number, period: number) {\r\n        this._text = text;\r\n        this.start = now;\r\n        this.end = now + period;\r\n        this.div.innerText = \"\";\r\n    }\r\n\r\n    updatePosition(position: THREE.Vector3, camera: THREE.Camera) {\r\n        this.position.copy(position);\r\n        if(this.lastOffsetInfo) {\r\n            this.position.add(this.lastOffsetInfo.offset);\r\n        }\r\n        this.position.project(camera);\r\n        toScreenSpace(this.position);\r\n        this.position.z = 0;\r\n        this.updatePositionInternal(false);\r\n    }\r\n\r\n    update(time: number) {\r\n        if(this.isComplete(time) && time >= this.finishTime) {\r\n            const newFinishTime = this.labelChangeTime.random();\r\n\r\n            if(this.lastOffsetInfo) {\r\n                this.lastOffsetInfo.used = false;\r\n            }\r\n\r\n            let index = randomIndex(this.offsets);\r\n            let count = 0;\r\n            while(this.offsets[index].used) {\r\n                index = (index + 1) % this.offsets.length;\r\n                count++;\r\n                if(count === this.offsets.length) {\r\n                    index = 0;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.lastOffsetInfo = this.offsets[index];\r\n            this.lastOffsetInfo.used = true;\r\n\r\n            this.setText(randomElement(this.quotes), time, 0.5);\r\n            this.finishTime = time + newFinishTime;\r\n        }\r\n\r\n        const text = this.getScrollText(time);\r\n        if(text !== this.div.innerText) {\r\n            this.div.innerText = text;\r\n            this.updateRect();\r\n            this.updatePositionInternal(true);\r\n        }\r\n    }\r\n\r\n    private updatePositionInternal(force: boolean) {\r\n        if(!this.lastPosition.equals(this.position) || force) {\r\n            this.lastPosition.copy(this.position);\r\n            const halfWidth = this.rect.width / 2;\r\n            const halfHeight = this.rect.height / 2;\r\n            this.div.style.transform = `translate(${this.position.x - halfWidth}px, ${this.position.y - halfHeight}px)`;\r\n        }\r\n    }\r\n\r\n    private updateRect() {\r\n        this.rect = this.div.getBoundingClientRect();\r\n    }\r\n}\r\n\r\nfunction toScreenSpace(vector: THREE.Vector3) {\r\n    vector.x = (vector.x + 1) / 2 * window.innerWidth;\r\n    vector.y = -(vector.y - 1) / 2 * window.innerHeight;\r\n}\r\n\r\nconst box = new THREE.BoxBufferGeometry(10, 10, 10);\r\nbox.computeBoundingSphere();\r\n\r\nconst bigBox = new THREE.BoxBufferGeometry(15, 15, 15);\r\nbigBox.computeBoundingSphere();\r\n\r\nconst projectileGeometry = new THREE.SphereBufferGeometry(2, 16, 16);\r\nconst projectileMaterial = new THREE.MeshBasicMaterial({color: \"red\"});\r\n\r\nconst fullHealthColour = new THREE.Color(0xFFFFFF);\r\nconst noHealthColour = new THREE.Color(0xFFFF00);\r\nconst flashColour = new THREE.Color(0xFF0000);\r\n\r\nconst up = new THREE.Vector3(0, 1, 0);\r\nconst tempQuat1 = new THREE.Quaternion();\r\nconst tempVec1 = new THREE.Vector3();\r\nconst tempVec2 = new THREE.Vector3();\r\n\r\nconst defaultLabelChangeTime = new Range(5, 10);\r\nconst defaultSwitchAttackTime = new Range(5, 10);\r\n\r\nexport enum AttackMode {\r\n    Direct,\r\n    Burst,\r\n    Snipe,\r\n    Clump,\r\n    RandomLength,\r\n    Round,\r\n    Length\r\n}\r\n\r\nexport class EnemyOptions {\r\n    quotes?: string[];\r\n    xRotateSpeed?: number;\r\n    yRotateSpeed?: number;\r\n    health?: number;\r\n    projectile?: Update;\r\n    shootDistance?: number;\r\n    labelChangeTime?: Range;\r\n    switchAttackTime?: Range;\r\n    switchAttacks?: boolean;\r\n    randomStartingAttack?: boolean;\r\n    startingAttack?: AttackMode;\r\n    boss?: boolean;\r\n    onDie?(enemy: Enemy): void;\r\n}\r\n\r\nexport class Enemy extends Update {\r\n\r\n    public readonly texture: THREE.Texture | null;\r\n    public readonly material: THREE.MeshBasicMaterial;\r\n    public readonly mesh: THREE.Mesh;\r\n    public readonly player: Player;\r\n\r\n    public switchAttacks = false;\r\n\r\n    private readonly collider: GridObject<Enemy>;\r\n    private readonly startHealth: number;\r\n    private _health = 100;\r\n    private xRotateSpeed = 15;\r\n    private yRotateSpeed = 15;\r\n    private projectile?: Update;\r\n    private lastFire = 0;\r\n\r\n    private fireDelay = 0.5;\r\n\r\n    private fireDelayRound = 0.2;\r\n    private roundNumShots = 12;\r\n\r\n    private fireDelayBurst = 1;\r\n    private burstNumShots = 8;\r\n    private burstDelayBetweenShots = 0.1;\r\n    private burstLastShotFired = 0;\r\n    private burstShotsFired = 0;\r\n\r\n    private shootDistance = 100;\r\n\r\n    private snipeShootDistance = 150;\r\n    private fireDelaySnipe = 2;\r\n\r\n    private clumpAmount = 8;\r\n    private fireDelayClump = 2;\r\n\r\n    private flashStart = 0;\r\n    private flashEnd = 0;\r\n\r\n    private boss = false;\r\n\r\n    private onDie?(enemy: Enemy): void;\r\n\r\n    private attackMode = AttackMode.Direct;\r\n    private nextSwitchAttack = 0;\r\n    private readonly switchAttackTime = defaultSwitchAttackTime;\r\n\r\n    private readonly labelContainer: HTMLDivElement;\r\n    private readonly labelLeft: LabelPositioner;\r\n    private readonly labelRight: LabelPositioner;\r\n\r\n    private nodes: THREE.Object3D[] = [];\r\n\r\n    private soffset = THREE.Math.randFloat(-Math.PI, Math.PI);\r\n    private coffset = THREE.Math.randFloat(-Math.PI, Math.PI);\r\n\r\n    private readonly offsets: OffsetInfo[] = [\r\n        {offset: new THREE.Vector3(-15, 0, 15), used: false},\r\n        {offset: new THREE.Vector3(15, 0, -15), used: false},\r\n        {offset: new THREE.Vector3(15, 0, 15), used: false},\r\n        {offset: new THREE.Vector3(-15, 0, -15), used: false},\r\n    ];\r\n\r\n    constructor(list: UpdateList, position: THREE.Vector3, texture: THREE.Texture | null, player: Player, labelContainer: HTMLDivElement, nodes: THREE.Object3D[], options?: EnemyOptions) {\r\n        super(list);\r\n\r\n        let labelChangeTime = defaultLabelChangeTime;\r\n        let quotes = [\"\"];\r\n        if(options) {\r\n            this._health = defaultValue(options.health, this._health);\r\n            this.xRotateSpeed = defaultValue(options.xRotateSpeed, this.xRotateSpeed);\r\n            this.yRotateSpeed = defaultValue(options.yRotateSpeed, this.yRotateSpeed);\r\n            this.projectile = defaultValue(options.projectile, this.projectile);\r\n            this.shootDistance = defaultValue(options.shootDistance, this.shootDistance);\r\n            labelChangeTime = defaultValue(options.labelChangeTime, labelChangeTime);\r\n            this.switchAttackTime = defaultValue(options.switchAttackTime, this.switchAttackTime);\r\n            this.attackMode = defaultValue(options.startingAttack, this.attackMode);\r\n            this.switchAttacks = defaultValue(options.switchAttacks, this.switchAttacks);\r\n            if(options.randomStartingAttack) {\r\n                this.attackMode = THREE.Math.randInt(0, AttackMode.RandomLength - 1);\r\n            }\r\n            quotes = defaultValue(options.quotes, quotes);\r\n            this.onDie = options.onDie;\r\n            this.boss = defaultValue(options.boss, this.boss);\r\n        }\r\n\r\n        this.nodes = nodes;\r\n\r\n        this.labelLeft = new LabelPositioner(document.createElement(\"div\"), labelChangeTime, quotes, this.offsets);\r\n        this.labelRight = new LabelPositioner(document.createElement(\"div\"), labelChangeTime, quotes, this.offsets);\r\n\r\n        this.startHealth = this._health;\r\n\r\n        this.xRotateSpeed = THREE.Math.degToRad(this.xRotateSpeed);\r\n        this.yRotateSpeed = THREE.Math.degToRad(this.yRotateSpeed);\r\n\r\n        const geometry = this.boss || texture instanceof THREE.VideoTexture ? bigBox : box;\r\n\r\n        this.player = player;\r\n        this.texture = texture;\r\n        this.material = new THREE.MeshBasicMaterial({map: texture});\r\n        this.mesh = new THREE.Mesh(geometry, this.material);\r\n        this.mesh.position.copy(position);\r\n\r\n        this.nodes.push(this.mesh);\r\n\r\n        this.list.root.add(this.mesh);\r\n        this.collider = list.grid.create(this, this.mesh.position, geometry.boundingSphere.radius);\r\n\r\n        this.labelContainer = labelContainer;\r\n        labelContainer.append(this.labelLeft.div, this.labelRight.div);\r\n    }\r\n\r\n    dispose(): void {\r\n        removeArray(this.nodes, this.mesh);\r\n        this.list.root.remove(this.mesh);\r\n        this.list.grid.destroy(this.collider);\r\n        this.labelContainer.removeChild(this.labelLeft.div);\r\n        this.labelContainer.removeChild(this.labelRight.div);\r\n    }\r\n\r\n    get health() {\r\n        return this._health;\r\n    }\r\n\r\n    damage(damage: number) {\r\n        this._health = Math.max(this._health - damage, 0);\r\n\r\n        this.flashStart = this.list.time;\r\n        this.flashEnd = this.list.time + 0.2;\r\n        this.updateColour(this.list.time);\r\n\r\n        if(this._health === 0) {\r\n            this.die();\r\n        }\r\n    }\r\n\r\n    die() {\r\n        // TODO: Create some cool explosion\r\n        if(this.onDie) {\r\n            this.onDie(this);\r\n        }\r\n        this.player.onEnemyKill();\r\n        this.list.create(ParticlesEnemyHit, this.mesh.position, tempVec1.set(0, 0, 1), {\r\n            spread: 360,\r\n            lifetime: new Range(0.2, 2.0),\r\n            count: this.boss ? new Range(600, 600) : new Range(200, 200),\r\n            spawnDelay: new Range(0.1, 0.5),\r\n            colour: \"yellow\"\r\n        });\r\n        this.list.remove(this);\r\n    }\r\n\r\n    update(time: number, dt: number): void {\r\n        const {mesh} = this;\r\n\r\n        this.updateColour(time);\r\n\r\n        mesh.rotateX(this.xRotateSpeed * dt);\r\n        mesh.rotateY(this.yRotateSpeed * dt);\r\n\r\n        if(!this.list.globals.pause) {\r\n            this.updateAttack(time);\r\n            if(this.boss) {\r\n                this.mesh.position.add(\r\n                    tempVec1\r\n                        .subVectors(this.player.mesh.position, mesh.position)\r\n                        .normalize()\r\n                        .multiplyScalar(2 * this.list.dt)\r\n                );\r\n            }\r\n            else {\r\n                this.mesh.position.add(\r\n                    tempVec1.set(\r\n                        Math.cos(time + this.coffset),\r\n                        0,\r\n                        Math.sin(time + this.soffset),\r\n                    )\r\n                    .normalize()\r\n                    .multiplyScalar(this.list.dt * 5)\r\n                );\r\n            }\r\n        }\r\n\r\n        this.labelLeft.updatePosition(this.mesh.position, this.list.camera);\r\n        this.labelLeft.update(time);\r\n\r\n        this.labelRight.updatePosition(this.mesh.position, this.list.camera);\r\n        this.labelRight.update(time);\r\n\r\n        this.collider.position.copy(this.mesh.position);\r\n        this.collider.update();\r\n    }\r\n\r\n    private createProjectile(position: THREE.Vector3, direction: THREE.Vector3, options?: ProjectileOptions) {\r\n        this.list.create(\r\n            Projectile,\r\n            new THREE.Mesh(projectileGeometry, projectileMaterial),\r\n            position,\r\n            direction,\r\n            options\r\n        );\r\n    }\r\n\r\n    private updateDirectAttack(time: number, ) {\r\n        const {player, lastFire, fireDelay} = this;\r\n        if(time > lastFire + fireDelay / (1 - player.killed / 10)) {\r\n            tempVec1\r\n                .subVectors(player.mesh.position, this.mesh.position)\r\n                .normalize();\r\n            this.createProjectile(this.mesh.position, tempVec1, {\r\n                minSpeed: 40 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                maxSpeed: 60 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                destroyable: true,\r\n                canDamagePlayer: true\r\n            });\r\n            this.lastFire = time;\r\n        }\r\n    }\r\n\r\n    private updateRoundAttack(time: number) {\r\n        const {mesh, lastFire, fireDelayRound, player} = this;\r\n        if(time > lastFire + fireDelayRound) {\r\n            const startAngle = THREE.Math.degToRad((time * 100) % 360);\r\n            for(let i = 0; i < this.roundNumShots; i++) {\r\n                tempQuat1.setFromAxisAngle(up, startAngle + THREE.Math.degToRad((i / this.roundNumShots) * 360));\r\n                tempVec1\r\n                    .set(0, 0, 1)\r\n                    .applyQuaternion(tempQuat1)\r\n                    .normalize();\r\n                this.createProjectile(mesh.position, tempVec1, {\r\n                    minSpeed: 40 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                    maxSpeed: 60 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                    destroyable: true,\r\n                    canDamagePlayer: true\r\n                });\r\n            }\r\n            this.lastFire = time;\r\n        }\r\n    }\r\n\r\n    private updateBurstAttack(time: number) {\r\n        const {mesh, lastFire, fireDelayBurst, player} = this;\r\n        if(time >= lastFire + fireDelayBurst) {\r\n            if(time > this.burstLastShotFired + this.burstDelayBetweenShots) {\r\n                tempVec1\r\n                    .set(THREE.Math.randFloat(-1, 1), THREE.Math.randFloat(-1, 1), THREE.Math.randFloat(-1, 1))\r\n                    .normalize()\r\n                    .multiplyScalar(THREE.Math.randFloat(-4, 4))\r\n                    .add(mesh.position);\r\n                tempVec2\r\n                    .subVectors(this.player.mesh.position, mesh.position)\r\n                    .normalize();\r\n                this.createProjectile(tempVec1, tempVec2,  {\r\n                    minSpeed: 80 * (1 + player.killed / 30) * (this.boss ? 1.25 : 1),\r\n                    maxSpeed: 100 * (1 + player.killed / 30) * (this.boss ? 1.25 : 1),\r\n                    destroyable: true,\r\n                    canDamagePlayer: true\r\n                });\r\n                this.burstShotsFired++;\r\n                this.burstLastShotFired = time;\r\n                if(this.burstShotsFired === this.burstNumShots) {\r\n                    this.lastFire = time;\r\n                    this.burstShotsFired = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateSnipeAttack(time: number) {\r\n        const {mesh, lastFire, fireDelaySnipe} = this;\r\n        if(time >= lastFire + fireDelaySnipe) {\r\n            // Fire ahead of the player\r\n            const speed = 125;\r\n            tempVec1\r\n                .copy(this.player.relativeVelocity)\r\n                .multiplyScalar(this.player.mesh.position.distanceTo(this.mesh.position) / speed)\r\n                .add(this.player.mesh.position)\r\n                .sub(this.mesh.position)\r\n                .normalize();\r\n\r\n            this.createProjectile(this.mesh.position, tempVec1, {\r\n                minSpeed: speed,\r\n                maxSpeed: speed,\r\n                destroyable: true,\r\n                canDamagePlayer: true\r\n            });\r\n            this.lastFire = time;\r\n        }\r\n    }\r\n\r\n    private updateClumpAttack(time: number) {\r\n        const {lastFire, fireDelayClump, player} = this;\r\n        if(time >= lastFire + fireDelayClump) {\r\n\r\n            const circles: THREE.Sphere[] = [];\r\n            for(let i = 0; i < this.clumpAmount; i++) {\r\n                const circle = new THREE.Sphere();\r\n                circle.center.set(\r\n                    THREE.Math.randFloat(-5, 5),\r\n                    0,\r\n                    THREE.Math.randFloat(-5, 5),\r\n                );\r\n                circle.radius = 5;\r\n\r\n                for(const other of circles) {\r\n                    if(circle.intersectsSphere(other)) {\r\n                        // Move the circle out of the way by the intersection amount\r\n                        const amount = -(other.center.distanceTo(circle.center) - (other.radius + circle.radius));\r\n                        tempVec1\r\n                            .subVectors(circle.center, other.center)\r\n                            .setLength(amount);\r\n                        circle.center.add(tempVec1);\r\n                    }\r\n                }\r\n\r\n                circles.push(circle);\r\n\r\n                tempVec1\r\n                    .subVectors(this.player.mesh.position, this.mesh.position)\r\n                    .normalize();\r\n\r\n                this.createProjectile(circle.center.add(this.mesh.position), tempVec1, {\r\n                    minSpeed: 40 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                    maxSpeed: 60 * (1 + player.killed / 20) * (this.boss ? 1.25 : 1),\r\n                    destroyable: true\r\n                });\r\n            }\r\n\r\n            this.lastFire = time;\r\n        }\r\n    }\r\n\r\n    private updateAttack(time: number) {\r\n        const {player, mesh, shootDistance, snipeShootDistance} = this;\r\n\r\n        if(this.switchAttacks && time > this.nextSwitchAttack) {\r\n            this.attackMode = THREE.Math.randInt(0, AttackMode.Length - 1);\r\n            this.nextSwitchAttack = time + this.switchAttackTime.random();\r\n        }\r\n\r\n        const d = this.attackMode === AttackMode.Snipe || this.boss ? snipeShootDistance : shootDistance;\r\n        const playerClose = player.mesh.position.distanceToSquared(mesh.position) <= d * d;\r\n        if(playerClose) {\r\n            switch (this.attackMode) {\r\n                case AttackMode.Direct:\r\n                    this.updateDirectAttack(time);\r\n                    break;\r\n\r\n                case AttackMode.Round:\r\n                    this.updateRoundAttack(time);\r\n                    break;\r\n\r\n                case AttackMode.Burst:\r\n                    this.updateBurstAttack(time);\r\n                    break;\r\n\r\n                case AttackMode.Snipe:\r\n                    this.updateSnipeAttack(time);\r\n                    break;\r\n\r\n                case AttackMode.Clump:\r\n                    this.updateClumpAttack(time);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateColour(time: number) {\r\n        // Set base colour from health\r\n        this.material.color\r\n            .copy(fullHealthColour)\r\n            .lerpHSL(noHealthColour, THREE.Math.mapLinear(\r\n                this._health,\r\n                this.startHealth, 0,\r\n                0, 1\r\n            ));\r\n        // Lerp from base colour to flash colour if flash happening\r\n        if(time >= this.flashStart && time <= this.flashEnd) {\r\n            const x = time * Math.PI * 20;\r\n            const f = (Math.sin(x - this.flashStart - Math.PI / 2) + 1) / 2;\r\n            this.material.color.lerp(flashColour, f);\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {defaultValue, Range} from \"./utils\";\r\nimport {Update, UpdateList} from \"./update\";\r\nimport {GridObject} from \"./collision\";\r\nimport {Enemy} from \"./enemy\";\r\nimport {Player} from \"./player\";\r\nimport {ParticlesEnemyHit, ParticlesEnemyHitOptions} from \"./particles_enemy_hit\";\r\n\r\nexport interface ProjectileOptions {\r\n    minSpeed?: number;\r\n    maxSpeed?: number;\r\n    acceleration?: number;\r\n    radius?: number;\r\n    destroyDistance?: number;\r\n    spread?: number;\r\n    destroyable?: boolean;\r\n    canDestroyProjectile?: boolean;\r\n    canDamagePlayer?: boolean;\r\n    canDamageNPC?: boolean;\r\n    damage?: number;\r\n}\r\n\r\nconst tempVec1 = new THREE.Vector3();\r\nconst tempVec2 = new THREE.Vector3();\r\nconst up = new THREE.Vector3(0, 1, 0);\r\nconst tempQuaternion1 = new THREE.Quaternion();\r\n\r\nexport class Projectile extends Update {\r\n\r\n    public readonly object: THREE.Object3D;\r\n    public readonly collider: GridObject<Projectile>;\r\n\r\n    public readonly destroyable: boolean = false;\r\n    public readonly canDestroyProjectile: boolean = false;\r\n    public readonly canDamagePlayer: boolean = false;\r\n    public readonly canDamageNPC: boolean = false;\r\n\r\n    public minSpeed = 80.0;\r\n    public maxSpeed = 120.0;\r\n    public acceleration = 1.0;\r\n    public destroyDistance = 100;\r\n    public damage = 10;\r\n\r\n    private velocity = new THREE.Vector3();\r\n\r\n    constructor(list: UpdateList, object: THREE.Object3D, position: THREE.Vector3, direction: THREE.Vector3, options?: ProjectileOptions) {\r\n        super(list);\r\n\r\n        let spread = Math.PI / 32;\r\n        let radius = 1;\r\n        if(options) {\r\n            radius = defaultValue(options.radius, radius);\r\n            this.minSpeed = defaultValue(options.minSpeed, this.minSpeed);\r\n            this.maxSpeed = defaultValue(options.maxSpeed, this.maxSpeed);\r\n            this.acceleration = defaultValue(options.acceleration, this.acceleration);\r\n            this.destroyDistance = defaultValue(options.destroyDistance, this.destroyDistance);\r\n            this.destroyable = defaultValue(options.destroyable, this.destroyable);\r\n            this.canDestroyProjectile = defaultValue(options.canDestroyProjectile, this.canDestroyProjectile);\r\n            this.canDamagePlayer = defaultValue(options.canDamagePlayer, this.canDamagePlayer);\r\n            this.canDamageNPC = defaultValue(options.canDamageNPC, this.canDamageNPC);\r\n            this.damage = defaultValue(options.damage, this.damage);\r\n            spread = defaultValue(options.spread, spread);\r\n        }\r\n\r\n        this.collider = list.grid.create(this, position, radius);\r\n\r\n        object.position.copy(position);\r\n        tempVec1\r\n            .copy(direction)\r\n            .applyQuaternion(tempQuaternion1.setFromAxisAngle(up, THREE.Math.randFloat(-spread / 2, spread / 2)));\r\n        tempVec2\r\n            .copy(tempVec1)\r\n            .add(position);\r\n\r\n        object.lookAt(tempVec2);\r\n        list.root.add(object);\r\n\r\n        this.object = object;\r\n\r\n        this.velocity\r\n            .copy(tempVec1)\r\n            .normalize()\r\n            .multiplyScalar(this.minSpeed);\r\n\r\n        // Look in the direction that it's moving. This should only need to be set on spawn.\r\n        tempVec1\r\n            .copy(this.velocity)\r\n            .add(this.object.position);\r\n        this.object.lookAt(tempVec1);\r\n    }\r\n\r\n    dispose() {\r\n        this.list.root.remove(this.object);\r\n        this.list.grid.destroy(this.collider);\r\n    }\r\n\r\n    private shouldDestroy(): boolean {\r\n        tempVec1\r\n            .copy(this.object.position)\r\n            .project(this.list.camera);\r\n\r\n        return tempVec1.x < -1.1 || tempVec1.x > 1.1 || tempVec1.y < -1.1 || tempVec1.y > 1.1;\r\n    }\r\n\r\n    spawnParticles(hit: THREE.Vector3, projectile: boolean) {\r\n        tempVec1\r\n            .copy(this.velocity)\r\n            .negate()\r\n            //.subVectors(this.object.position, hit)\r\n            .normalize();\r\n        const params: ParticlesEnemyHitOptions = projectile ?\r\n            {\r\n                spread: 360,\r\n                speed: new Range(80, 120),\r\n                lifetime: new Range(0.1, 0.3),\r\n                colour: \"red\"\r\n            }:\r\n            {};\r\n        this.list.create(ParticlesEnemyHit, this.object.position, tempVec1, params);\r\n    }\r\n\r\n    update(time: number, dt: number) {\r\n        tempVec1\r\n            .copy(this.velocity)\r\n            .normalize();\r\n        this.velocity\r\n            .addScaledVector(tempVec1, this.acceleration * dt)\r\n            .clampLength(this.minSpeed, this.maxSpeed);\r\n        this.object.position.addScaledVector(this.velocity, dt);\r\n\r\n        this.collider.position.copy(this.object.position);\r\n        this.collider.update();\r\n\r\n        if(this.shouldDestroy()) {\r\n            this.list.remove(this);\r\n        }\r\n        else if(!this.list.globals.pause) {\r\n            const objects = this.list.grid.search(this.collider.position, this.collider.radius);\r\n            for(const object of objects) {\r\n                let destroy = false;\r\n                if(this.canDestroyProjectile &&\r\n                    object.object instanceof Projectile &&\r\n                    object.object.destroyable) {\r\n                    this.spawnParticles(object.object.object.position, true);\r\n                    this.list.remove(object.object);\r\n                    destroy = true;\r\n                }\r\n                else if(this.canDamageNPC &&\r\n                    object.object instanceof Enemy) {\r\n                    this.spawnParticles(object.object.mesh.position, false);\r\n                    object.object.damage(this.damage);\r\n                    destroy = true;\r\n                }\r\n                else if(this.canDamagePlayer &&\r\n                    object.object instanceof Player) {\r\n                    // TODO: DESTROY THE PLAYER\r\n                    object.object.damage(this.damage);\r\n                    destroy = true;\r\n                }\r\n                if(destroy) {\r\n                    this.list.remove(this);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {defaultValue, Range} from \"./utils\";\r\nimport {Action} from \"./input\";\r\nimport {Update, UpdateList} from \"./update\";\r\nimport {Projectile} from \"./projectile\";\r\nimport {ParticlesEnemyHit} from \"./particles_enemy_hit\";\r\nimport {GridObject} from \"./collision\";\r\ninterface PlayerMovementOptions {\r\n    movementSpeed?: number;\r\n    dragSpeed?: number;\r\n}\r\n\r\nconst tempVec1 = new THREE.Vector3();\r\nconst tempVec2 = new THREE.Vector3();\r\nconst tempQuat1 = new THREE.Quaternion();\r\n\r\nclass PlayerMovement {\r\n    public movementSpeed = 30;\r\n    public dragSpeed = 10;\r\n\r\n    private readonly object: THREE.Object3D;\r\n    private readonly list: UpdateList;\r\n\r\n    private velocity = new THREE.Vector3();\r\n\r\n    constructor(list: UpdateList, object: THREE.Object3D, options?: PlayerMovementOptions) {\r\n        this.object = object;\r\n        this.list = list;\r\n\r\n        if (options) {\r\n            this.movementSpeed = defaultValue(options.movementSpeed, this.movementSpeed);\r\n            this.dragSpeed = defaultValue(options.dragSpeed, this.dragSpeed);\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        const {input} = this.list;\r\n        const up = input.isDown(Action.up) ? -1 : 0;\r\n        const left = input.isDown(Action.left) ? -1 : 0;\r\n        const right = input.isDown(Action.right) ? 1 : 0;\r\n        const down = input.isDown(Action.down) ? 1 : 0;\r\n\r\n        this.object.position.addScaledVector(\r\n            tempVec1.set(right + left, 0, up + down).normalize(),\r\n            dt * this.movementSpeed\r\n        );\r\n        /*\r\n        const acceleration = tempVec1.set(right + left, 0, up + down).normalize();\r\n\r\n        this.velocity.addScaledVector(acceleration, dt * this.accelerationSpeed);\r\n        tempVec1.copy(this.velocity)\r\n            .negate()\r\n            .normalize()\r\n            .multiplyScalar(this.dragSpeed * dt)\r\n            .clampLength(0, this.velocity.length());\r\n        this.velocity.add(tempVec1);\r\n\r\n        this.object.position.addScaledVector(this.velocity, dt);\r\n\r\n        tempVec1.copy(this.velocity)\r\n            .normalize()\r\n            .add(this.object.position);\r\n        this.object.lookAt(tempVec1);*/\r\n    }\r\n}\r\n\r\ninterface PlayerWeaponOptions {\r\n    fireDelay?: number;\r\n}\r\n\r\nclass PlayerWeapon {\r\n    public fireDelay = 0.1;\r\n\r\n    private readonly list: UpdateList;\r\n    private readonly object: THREE.Object3D;\r\n    private readonly mouseGround: THREE.Vector3;\r\n    private readonly projectileGeometry = new THREE.BoxBufferGeometry(0.5, 0.5, 1);\r\n    private readonly projectileMaterial = new THREE.MeshBasicMaterial({color: \"red\"});\r\n\r\n    private lastFire = 0;\r\n    public killed = 0;\r\n\r\n    constructor(list: UpdateList, object: THREE.Object3D, mouseGround: THREE.Vector3, options?: PlayerWeaponOptions) {\r\n        this.list = list;\r\n        this.object = object;\r\n        this.mouseGround = mouseGround;\r\n\r\n        this.projectileGeometry.computeBoundingSphere();\r\n\r\n        if (options) {\r\n            this.fireDelay = defaultValue(options.fireDelay, this.fireDelay);\r\n        }\r\n    }\r\n\r\n    onEnemyKill() {\r\n        this.killed++;\r\n    }\r\n\r\n    createProjectile(direction: THREE.Vector3) {\r\n        this.list.create(Projectile, new THREE.Mesh(this.projectileGeometry, this.projectileMaterial), this.object.position, direction, {\r\n            radius: 2,\r\n            canDestroyProjectile: true,\r\n            canDamageNPC: true,\r\n            damage: 10\r\n        });\r\n    }\r\n\r\n    pointAtMouse() {\r\n        return tempVec1\r\n            .subVectors(this.mouseGround, this.object.position)\r\n            .normalize();\r\n    }\r\n\r\n    update(time: number) {\r\n        if(time > this.lastFire + this.fireDelay && this.list.input.isDown(Action.fire)) {\r\n\r\n            if(this.killed < 4) {\r\n                this.createProjectile(this.pointAtMouse());\r\n            }\r\n            else if(this.killed < 8) {\r\n                this.createProjectile(\r\n                    this.pointAtMouse()\r\n                        .applyQuaternion(\r\n                            tempQuat1.setFromAxisAngle(\r\n                                tempVec2.set(0, 1, 0),\r\n                                -THREE.Math.degToRad(5)\r\n                            )\r\n                        )\r\n                );\r\n\r\n                this.createProjectile(\r\n                    this.pointAtMouse()\r\n                        .applyQuaternion(\r\n                            tempQuat1.setFromAxisAngle(\r\n                                tempVec2.set(0, 1, 0),\r\n                                THREE.Math.degToRad(5)\r\n                            )\r\n                        )\r\n                );\r\n            }\r\n            else {\r\n                this.createProjectile(this.pointAtMouse());\r\n\r\n                this.createProjectile(\r\n                    this.pointAtMouse()\r\n                        .applyQuaternion(\r\n                            tempQuat1.setFromAxisAngle(\r\n                                tempVec2.set(0, 1, 0),\r\n                                -THREE.Math.degToRad(10)\r\n                            )\r\n                        )\r\n                );\r\n\r\n                this.createProjectile(\r\n                    this.pointAtMouse()\r\n                        .applyQuaternion(\r\n                            tempQuat1.setFromAxisAngle(\r\n                                tempVec2.set(0, 1, 0),\r\n                                THREE.Math.degToRad(10)\r\n                            )\r\n                        )\r\n                );\r\n            }\r\n\r\n            this.lastFire = time;\r\n        }\r\n    }\r\n}\r\n\r\nconst box = new THREE.BoxBufferGeometry(1, 1, 1);\r\nbox.computeBoundingSphere();\r\n\r\nexport class Player extends Update {\r\n\r\n    public readonly mesh = new THREE.Mesh(\r\n        box,\r\n        new THREE.MeshBasicMaterial({color: \"green\"})\r\n    );\r\n\r\n    private readonly playerMovement: PlayerMovement;\r\n    private readonly playerWeapon: PlayerWeapon;\r\n    private readonly collider: GridObject<Player>;\r\n\r\n    public readonly relativeVelocity = new THREE.Vector3();\r\n\r\n    private _health = 10;\r\n\r\n    constructor(list: UpdateList, mouseGround: THREE.Vector3, options?: PlayerMovementOptions & PlayerWeaponOptions) {\r\n        super(list);\r\n        this.playerMovement = new PlayerMovement(list, this.mesh, options);\r\n        this.playerWeapon = new PlayerWeapon(list, this.mesh, mouseGround, options);\r\n        this.list.root.add(this.mesh);\r\n\r\n        this.mesh.geometry.computeBoundingSphere();\r\n\r\n        this.collider = list.grid.create(this, this.mesh.position, box.boundingSphere.radius);\r\n    }\r\n\r\n    get health() {\r\n        return this._health;\r\n    }\r\n\r\n    get killed() {\r\n        return this.playerWeapon.killed;\r\n    }\r\n\r\n    onEnemyKill() {\r\n        this.playerWeapon.onEnemyKill();\r\n    }\r\n\r\n    damage(damage: number) {\r\n        this._health = Math.max(this._health - damage, 0);\r\n\r\n        if(this._health === 0) {\r\n            this.die();\r\n        }\r\n    }\r\n\r\n    die() {\r\n        // Teleport over to 0, 0, 0 after puffing out some particles\r\n        this.list.create(ParticlesEnemyHit, this.mesh.position, tempVec1.set(0, 0, 1), {\r\n            spread: 360,\r\n            count: new Range(40, 50),\r\n            speed: new Range(60, 80),\r\n            lifetime: new Range(0.5, 1.0),\r\n            spawnDelay: new Range(0.05, 0.1),\r\n            colour: \"green\"\r\n        });\r\n        this.mesh.position.set(0, 0, 0);\r\n        this._health = 10;\r\n    }\r\n\r\n    dispose() {\r\n        this.list.root.remove(this.mesh);\r\n        this.list.grid.destroy(this.collider);\r\n    }\r\n\r\n    update(time: number, dt: number) {\r\n        if(!this.list.globals.pause) {\r\n            this.playerMovement.update(dt);\r\n            this.playerWeapon.update(time);\r\n        }\r\n        this.relativeVelocity\r\n            .subVectors(this.mesh.position, this.collider.position)\r\n            .divideScalar(dt);\r\n        this.collider.position.copy(this.mesh.position);\r\n        this.collider.update();\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {defaultValue} from \"./utils\";\r\nimport {Update, UpdateList} from \"./update\";\r\n\r\nexport interface CameraMovementOptions {\r\n    cameraLerpSpeed?: number;\r\n    mouseLerpSpeed?: number;\r\n}\r\n\r\nexport default class CameraMovement extends Update {\r\n\r\n    private readonly cameraObjectInterpTarget = new THREE.Vector3();\r\n    private readonly mouseInterpTarget = new THREE.Vector3();\r\n\r\n    private readonly camera: THREE.Camera;\r\n    private readonly target: THREE.Object3D;\r\n    private readonly mouse: THREE.Vector3;\r\n\r\n    public cameraLerpSpeed = 0.1;\r\n    public mouseLerpSpeed = 0.1;\r\n\r\n    constructor(list: UpdateList, camera: THREE.Camera, target: THREE.Object3D, mouse: THREE.Vector3, options?: CameraMovementOptions) {\r\n        super(list);\r\n\r\n        this.camera = camera;\r\n        this.target = target;\r\n        this.mouse = mouse;\r\n\r\n        if(options) {\r\n            this.cameraLerpSpeed = defaultValue(options.cameraLerpSpeed, this.cameraLerpSpeed);\r\n            this.mouseLerpSpeed = defaultValue(options.mouseLerpSpeed, this.mouseLerpSpeed);\r\n        }\r\n\r\n        this.cameraObjectInterpTarget.copy(camera.position);\r\n        this.mouseInterpTarget.copy(mouse);\r\n    }\r\n\r\n    update(time: number, dt: number) {\r\n        const startY = this.camera.position.y;\r\n\r\n        this.cameraObjectInterpTarget.lerp(this.target.position, this.cameraLerpSpeed * dt);\r\n        this.mouseInterpTarget.lerp(this.mouse, this.mouseLerpSpeed * dt);\r\n\r\n        this.camera.position\r\n            .subVectors(this.mouseInterpTarget, this.cameraObjectInterpTarget)\r\n            .divideScalar(4)\r\n            .add(this.cameraObjectInterpTarget);\r\n\r\n        this.camera.position.y = startY;\r\n    }\r\n}","import * as THREE from 'three';\r\nimport {removeArray} from \"./utils\";\r\n\r\nfunction hash3(x: number, y: number, z: number) {\r\n    return x * 73856093 ^ y * 19349663 ^ z * 83492791;\r\n}\r\n\r\nfunction hash2(x: number, y: number) {\r\n    return x * 73856093 ^ y * 83492791;\r\n}\r\n\r\nfunction same<T>(set: ReadonlySet<T>, e: readonly T[]) {\r\n    const length = e.length;\r\n    if(set.size !== length) {\r\n        return false;\r\n    }\r\n    for(let i = 0; i < length; i++) {\r\n        if(!set.has(e[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction getGridKeys(position: THREE.Vector3, radius: number, size: number) {\r\n    const lowX = Math.floor((position.x - radius) / size);\r\n    const highX = Math.floor((position.x + radius) / size);\r\n    const lowY = Math.floor((position.y - radius) / size);\r\n    const highY = Math.floor((position.y + radius) / size);\r\n    const lowZ = Math.floor((position.z - radius) / size);\r\n    const highZ = Math.floor((position.z + radius) / size);\r\n    const keys = [];\r\n    for(let x = lowX; x <= highX; x++) {\r\n        for(let y = lowY; y <= highY; y++) {\r\n            for(let z = lowZ; z <= highZ; z++) {\r\n                keys.push(hash3(x, y, z));\r\n            }\r\n        }\r\n    }\r\n    return keys;\r\n}\r\n\r\nexport class GridObject<T = unknown> {\r\n    public readonly grid: Grid;\r\n    public readonly object: T;\r\n    public readonly keys = new Set<number>();\r\n    public readonly position = new THREE.Vector3();\r\n    public radius = 1;\r\n\r\n    private readonly _position = new THREE.Vector3();\r\n    private _radius = 1;\r\n\r\n    constructor(grid: Grid, object: T, position: THREE.Vector3, radius: number) {\r\n        this.grid = grid;\r\n        this.object = object;\r\n\r\n        this._position.copy(position);\r\n        this.position.copy(position);\r\n        this._radius = radius;\r\n        this.radius = radius;\r\n    }\r\n\r\n    update() {\r\n        let changed = false;\r\n        if(!this._position.equals(this.position)) {\r\n            this._position.copy(this.position);\r\n            changed = true;\r\n        }\r\n\r\n        if(this._radius !== this.radius) {\r\n            this._radius = this.radius;\r\n            changed = true;\r\n        }\r\n\r\n        if(changed) {\r\n            this.grid.update(this);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Grid {\r\n    public readonly cellSize: number;\r\n    private readonly objects = new Set<GridObject>();\r\n    private readonly objectsUpdated: GridObject[] = [];\r\n    private readonly cellMap = new Map<number, GridObject[]>();\r\n\r\n    constructor(cellSize: number) {\r\n        this.cellSize = cellSize;\r\n    }\r\n\r\n    create<T>(object: T, position: THREE.Vector3, radius: number): GridObject<T> {\r\n        const gridObject = new GridObject<T>(this, object, position, radius);\r\n        this.objects.add(gridObject);\r\n        this.link(gridObject, getGridKeys(position, radius, this.cellSize));\r\n        return gridObject;\r\n    }\r\n\r\n    destroy(gridObject: GridObject) {\r\n        if(this.objects.delete(gridObject)) {\r\n            this.unlink(gridObject);\r\n        }\r\n    }\r\n\r\n    update(gridObject: GridObject) {\r\n        if(this.objects.has(gridObject)) {\r\n            this.objectsUpdated.push(gridObject);\r\n        }\r\n    }\r\n\r\n    search(position: THREE.Vector3, radius: number) {\r\n        this.updateInternal();\r\n        const hits = [];\r\n        const keys = getGridKeys(position, radius, this.cellSize);\r\n        const radiusSq = radius * radius;\r\n        for(let i = 0, len = keys.length; i < len; i++) {\r\n            const contents = this.cellMap.get(keys[i]);\r\n            if(contents) {\r\n                for(let c = 0, len2 = contents.length; c < len2; c++) {\r\n                    const gridObject = contents[c];\r\n                    const objectRadiusSq = gridObject.radius * gridObject.radius;\r\n                    const dx = gridObject.position.x - position.x;\r\n                    const dy = gridObject.position.y - position.y;\r\n                    const dz = gridObject.position.z - position.z;\r\n                    if(dx * dx + dy * dy + dz * dz <= radiusSq + objectRadiusSq) {\r\n                        hits.push(gridObject);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return hits;\r\n    }\r\n\r\n    private updateInternal() {\r\n        const updatedList = this.objectsUpdated;\r\n        for(let i = 0, len = updatedList.length; i < len; i++) {\r\n            const object = updatedList[i];\r\n            if(!this.objects.has(object)) {\r\n                continue;\r\n            }\r\n            const newKeys = getGridKeys(object.position, object.radius, this.cellSize);\r\n            if(!same(object.keys, newKeys)){\r\n                this.unlink(object);\r\n                this.link(object, newKeys);\r\n            }\r\n        }\r\n        updatedList.length = 0;\r\n    }\r\n\r\n    private link(gridObject: GridObject, keys: readonly number[]) {\r\n        for(let i = 0, len = keys.length; i < len; i++) {\r\n            const key = keys[i];\r\n            gridObject.keys.add(key);\r\n            const contents = this.cellMap.get(key);\r\n            if(!contents) {\r\n                this.cellMap.set(key, [gridObject]);\r\n            }\r\n            else {\r\n                contents.push(gridObject);\r\n            }\r\n        }\r\n    }\r\n\r\n    private unlink(gridObject: GridObject) {\r\n        for(const key of gridObject.keys) {\r\n            const contents = this.cellMap.get(key);\r\n            if(contents) {\r\n                removeArray(contents, gridObject);\r\n            }\r\n        }\r\n        gridObject.keys.clear();\r\n    }\r\n}","import React, { ReactNode} from 'react';\r\nimport Scrollbar from 'react-scrollbar';\r\n\r\nimport \"./overlay.css\";\r\n\r\nexport interface OverlayProps {\r\n    onCloseClicked(): void;\r\n}\r\n\r\ninterface OverlayState {\r\n    show: boolean;\r\n    children: ReactNode | null;\r\n}\r\n\r\nexport class Overlay extends React.Component<OverlayProps, OverlayState> {\r\n\r\n    private ref?: Scrollbar;\r\n\r\n    state = {\r\n        show: false,\r\n        children: null\r\n    };\r\n\r\n    componentDidUpdate(prevProps: Readonly<React.PropsWithChildren<OverlayProps>>, prevState: Readonly<OverlayState>, snapshot?: any): void {\r\n        if(prevProps.children !== this.props.children) {\r\n            const show = this.props.children !== null;\r\n            if(show && this.ref) {\r\n                this.ref.scrollYTo(0);\r\n            }\r\n            this.setState({show});\r\n            if(this.props.children) {\r\n                this.setState({children: this.props.children});\r\n            }\r\n        }\r\n    }\r\n\r\n    private readonly onCloseClicked = () => {\r\n        this.props.onCloseClicked();\r\n    };\r\n\r\n    private readonly setRef = (r: Scrollbar) => {\r\n        this.ref = r || undefined;\r\n    };\r\n\r\n    render() {\r\n        const {show, children} = this.state;\r\n        return (\r\n            <div className={\"overlay-wrapper \" + (show ? \"show-animate\" : \"hide-animate\")}>\r\n                <div className=\"overlay\">\r\n                    <div className=\"overlay-close\" onClick={this.onCloseClicked}>X</div>\r\n                    <Scrollbar\r\n                        className=\"overlay-scrollbar\"\r\n                        contentClassName=\"overlay-content\"\r\n                        ref={this.setRef}\r\n                        smoothScrolling={true}\r\n                    >\r\n                        {children}\r\n                    </Scrollbar>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as THREE from \"three\";\r\nimport {Update, UpdateList} from \"./update\";\r\n\r\nconst tempVec1 = new THREE.Vector3();\r\nconst tempQuat = new THREE.Quaternion();\r\nconst tempVec2 = new THREE.Vector3();\r\n\r\nexport class Arrow extends Update {\r\n\r\n    private readonly nodes: THREE.Object3D[];\r\n    private readonly target: THREE.Object3D;\r\n    private material: THREE.MeshBasicMaterial;\r\n    private fadeIn = true;\r\n    private fadeTime?: number;\r\n    private targetPosition = new THREE.Vector3();\r\n    private targetQuaternion = new THREE.Quaternion();\r\n    public readonly model: THREE.Mesh;\r\n\r\n    constructor(list: UpdateList, target: THREE.Object3D, model: THREE.Mesh, nodes: THREE.Object3D[]) {\r\n        super(list);\r\n        this.target = target;\r\n        this.nodes = nodes;\r\n        this.material = (model as THREE.Mesh).material as THREE.MeshBasicMaterial;\r\n        this.material.transparent = true;\r\n        this.model = model;\r\n        this.model.scale.setScalar(0.5);\r\n\r\n        list.root.add(this.model);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.list.root.remove(this.model);\r\n        super.dispose();\r\n    }\r\n\r\n    update(time: number) {\r\n        if(this.nodes.length === 0) {\r\n            this.model.visible = false;\r\n            return;\r\n        }\r\n\r\n        tempVec1.setScalar(0);\r\n        let shortest = Infinity;\r\n        for(const node of this.nodes) {\r\n            const d = node.position.distanceToSquared(this.target.position);\r\n            if(d < shortest) {\r\n                shortest = d;\r\n                tempVec1.copy(node.position);\r\n            }\r\n        }\r\n\r\n        if(shortest !== Infinity) {\r\n            tempQuat.copy(this.model.quaternion);\r\n            this.model.lookAt(tempVec1);\r\n            this.model.rotateY(THREE.Math.degToRad(-90));\r\n            this.targetQuaternion.copy(this.model.quaternion);\r\n            this.model.quaternion.copy(tempQuat);\r\n\r\n            tempVec2.copy(tempVec1).add(this.target.position).divideScalar(2);\r\n            tempVec2.subVectors(tempVec1, tempVec2).clampLength(5, 10);\r\n            const length = tempVec2.length();\r\n            this.targetPosition.copy(this.target.position).add(tempVec2);\r\n            this.material.opacity = THREE.Math.mapLinear(\r\n                THREE.Math.clamp(length, 5, 10),\r\n                0.5, 1.0,\r\n                0.0, 1.0\r\n            );\r\n        }\r\n\r\n        if(this.fadeTime !== undefined) {\r\n            let fadeOpacity = THREE.Math.mapLinear(\r\n                THREE.Math.clamp(time, this.fadeTime, this.fadeTime + 1),\r\n                this.fadeTime, this.fadeTime + 1,\r\n                0.0, 1.0\r\n            );\r\n\r\n            if(!this.fadeIn) {\r\n                fadeOpacity = 1.0 - fadeOpacity;\r\n            }\r\n\r\n            this.material.opacity = Math.min(this.material.opacity, fadeOpacity);\r\n        }\r\n\r\n        THREE.Quaternion.slerp(this.model.quaternion, this.targetQuaternion, this.model.quaternion, 10 * this.list.dt);\r\n        this.model.position.lerp(this.targetPosition, 5 * this.list.dt);\r\n        this.model.visible = this.material.opacity > 0;\r\n    }\r\n\r\n    fade(time: number, fadeIn: boolean) {\r\n        this.fadeIn = fadeIn;\r\n        this.fadeTime = time;\r\n    }\r\n}","import React from 'react';\nimport * as THREE from 'three';\n\nimport './App.css';\nimport {EffectComposer} from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport {UnrealBloomPass} from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport {SMAAPass} from \"three/examples/jsm/postprocessing/SMAAPass\";\nimport {RenderPass} from \"three/examples/jsm/postprocessing/RenderPass\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\nimport {Player} from \"./player\";\nimport CameraMovement from \"./camera\";\nimport {Action, Input} from \"./input\";\nimport {UpdateList} from \"./update\";\nimport {Grid} from \"./collision\";\nimport {AttackMode, Enemy} from \"./enemy\";\nimport {Overlay} from \"./overlay\";\nimport {Range} from './utils';\nimport {Tyler} from \"./people/tyler\";\nimport {Aegwynn} from \"./people/aeg\";\nimport {AnyKey13} from \"./people/any\";\nimport {Blocky} from \"./people/blocky\";\nimport {Cal} from \"./people/cal\";\nimport {Dash} from \"./people/dash\";\nimport {Mark} from \"./people/mark\";\nimport {Mute} from \"./people/mute\";\nimport {Neel} from \"./people/neel\";\nimport {Snow} from \"./people/snow\";\nimport {Sticky} from \"./people/stick\";\nimport {Supa} from \"./people/supa\";\nimport {Vase} from \"./people/vase\";\nimport {Deelon} from \"./people/deelon\";\nimport {Arrow} from \"./arrow\";\n\ninterface AppState {\n    message: JSX.Element | null;\n    count: number;\n    length: number;\n    loading: number;\n    maxToLoad: number;\n    loaded: boolean;\n    started: boolean;\n}\n\n/**\n * Player:\n *  - Flies around with WASD, aims with the mouse.\n *  - Camera follows player in addition to their cursor that they use to attack things\n *  - left click to fire projectiles at enemies. (green or white or something)\n *  - right click to fire a laser that shoots through all enemies infront (shader animation ye boi!)\n *  - Has 4 hp or so, 1 hp taken per enemy hit. When 0, respawn somewhere in the map.\n *\n * Enemies:\n *  - Box with our pfps on it\n *  - When close enough, fire projectiles back at the player (red)\n *  - When destroyed, game pauses for a moment and a message is shown with what the person said about ova for the 2nd year.\n *  - When all enemies are destroyed, a big one that fades between everyone's pfps shows up.\n *  - Big enemy pops up little snippets of everyone's messages as you fight it (lots of hp)\n *  - Fires bigger projectiles that one shot the player (big spheres) need to dodge!\n *  - When destroyed, explodes and sends out tonnes of little squares with our pfps on them.\n *\n * Final message from me at the end.\n */\n\nconst people = [\n    {\n        img: \"/tyler_darker.png\",\n        quotes: [\n            \"I’d be glad that OVA lasted\",\n            \"Take this moment to say thank you\",\n            \"Fucking great friends\",\n            \"Fucking great to be back\",\n            \"See you cunts\",\n            \"Typing shit is old news\",\n            \"Y’all\"\n        ],\n        message: <Tyler/>\n    },\n    {\n        img: \"/cal_darker.png\",\n        quotes: [\n            \"Ups and downs\",\n            \"Notable events\",\n            \"Whoever the fuck is reading is\",\n            \"You’re all cool\",\n            \"Here’s to another year\",\n            \"*strider noises*\"\n        ],\n        message: <Cal/>\n    },\n    {\n        img: \"/aeg_darker.png\",\n        quotes: [\n            \"A years worth of memories\",\n            \"Stay for good\",\n            \"Really love you guys\",\n            \"Thank you all for a great year\",\n            \"Don’t miss another moment\"\n        ],\n        message: <Aegwynn/>\n    },\n    {\n        img: \"/any_darker.png\",\n        quotes: [\n            \"Hi it's me, any key\",\n            \"I can't help but feel amazed\",\n            \"Would genuinely love to meet you\",\n            \"I love you, no homo\",\n            \"Thank you for every fuck you said\",\n            \"I am thankful\",\n            \"You're all a part of me\",\n        ],\n        message: <AnyKey13/>\n    },\n    {\n        img: \"/blocky_darker.png\",\n        quotes: [\n            \"Having fun no matter what\",\n            \"You guys were always there\",\n            \"The next decade and beyond\",\n            \"Thank you everyone\",\n            \"Make everyone around you smile\",\n            \"Best of times my friends\"\n        ],\n        message: <Blocky/>\n    },\n    {\n        img: \"/dash_darker.png\",\n        quotes: [\n            \"Charming place\",\n            \"I love all of you\",\n            \"<3\",\n            \"Thank each & every one of you\"\n        ],\n        message: <Dash/>\n    },\n    {\n        img: \"/mark_darker.png\",\n        quotes: [\n            \"Not much has changed\",\n            \"Our community is steady\",\n            \"I've been more active\",\n            \"I'm happy this community is still there\",\n            \"It's nice to have honestly\",\n            \"You guys are why I use discord\",\n            \"Take care everyone\"\n        ],\n        message: <Mark/>\n    },\n    {\n        img: \"/mute_darker.png\",\n        quotes: [\n            \"Alright fellas listen up\",\n            \"Gonna fucking wing it\",\n            \"Big part of my life\",\n            \"Tons of fantastic people\",\n            \"Straight from the heart\",\n            \"Fucking cool as shit\"\n        ],\n        message: <Mute/>\n    },\n    {\n        img: \"/neel_darker.png\",\n        quotes: [\n            \"yo\",\n            \"SL\",\n            \"was sick\",\n            \"when are\",\n            \"we doing\",\n            \"it again?\"\n        ],\n        message: <Neel/>\n    },\n    {\n        img: \"/snow_darker.png\",\n        quotes: [\n            \"You all are special & dear to me\",\n            \"lol akjdslksdf\",\n            \"Hecc shiz\",\n            \"Thoughtful, caring, funny, unique\",\n            \"Thankies\",\n            \"Known you guys for way longer\"\n        ],\n        message: <Snow/>\n    },\n    {\n        img: \"/sticky_darker.mp4\",\n        quotes: [\n            \"\",\n            \"\"\n        ],\n        message: <Sticky/>\n    },\n    {\n        img: \"/supa_darker.png\",\n        quotes: [\n            \"Y’all are fucking great\",\n            \"Best damn friends\",\n            \"Nicest, funniest, coolest\",\n            \"A total blast\",\n            \"Meme it up\",\n            \"Love y’all no homo\"\n        ],\n        message: <Supa/>\n    },\n    {\n        img: \"/vase_darker.png\",\n        quotes: [\n            \"Nothing ever happened somehow\",\n            \"I think you are cool\",\n            \"A jojo fan running to ova\",\n            \"A good friend that is ova\",\n            \"This beautiful, tear-jerking story\",\n            \"I’ve been getting progressively less funny\"\n        ],\n        message: <Vase/>\n    }\n];\n\nconst deelon = <Deelon/>;\n\nconst tempVec1 = new THREE.Vector3();\nconst tempRay1 = new THREE.Ray();\n\nexport default class App extends React.Component<{}, AppState> {\n\n    private readonly scene = new THREE.Scene();\n    private readonly camera = new THREE.PerspectiveCamera(90, 1, 0.1, 128);\n\n    private readonly grid = new Grid(20);\n    private readonly renderer = new THREE.WebGLRenderer({antialias: false});\n    private readonly input = new Input(document.body, {\n        \"mouse0\": Action.fire,\n        \"mouse2\": Action.altfire,\n        \"w\": Action.up,\n        \"a\": Action.left,\n        \"s\": Action.down,\n        \"d\": Action.right\n    });\n    private readonly updateList = new UpdateList(this.scene, this.camera, this.input, this.grid);\n\n    private readonly lightAmbient = new THREE.AmbientLight(0x111111);\n\n    private readonly effectComposer = new EffectComposer(this.renderer);\n    private readonly renderPass = new RenderPass(this.scene, this.camera);\n    private readonly bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.8, 1, 0.1);\n    private readonly aaPass = new SMAAPass(window.innerWidth, window.innerHeight);\n\n    private readonly groundPlane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);\n    private readonly mouseGround = new THREE.Vector3(0, 0, 0);\n\n    private readonly player = this.updateList.create(Player, this.mouseGround, {\n\n    });\n\n    private readonly cameraMovement = this.updateList.create(CameraMovement, this.camera, this.player.mesh, this.mouseGround, {\n        cameraLerpSpeed: 1.0,\n        mouseLerpSpeed: 2.0\n    });\n\n    private readonly quoteMap = new WeakMap<Enemy, JSX.Element>();\n\n    private time = 0;\n    private labelDiv?: HTMLDivElement;\n\n    private arrowModel?: THREE.Mesh;\n    private loadedTextures = new Map<string, THREE.Texture>();\n\n    private ref?: HTMLDivElement;\n\n    private nodes: THREE.Object3D[] = [];\n\n    state = {\n        message: null,\n        count: 0,\n        length: people.length,\n\n        loading: 0,\n        maxToLoad: 0,\n        loaded: false,\n        started: false\n    };\n\n    private readonly animate = () => {\n        requestAnimationFrame(this.animate);\n\n        this.input.update();\n\n        tempRay1.origin.setFromMatrixPosition(this.camera.matrixWorld);\n        tempRay1.direction\n            .set(this.input.mouseNDC.x, this.input.mouseNDC.y, 0.5)\n            .unproject(this.camera)\n            .sub(tempRay1.origin)\n            .normalize();\n        tempRay1.intersectPlane(this.groundPlane, this.mouseGround);\n\n        const time = performance.now() / 1000;\n        const delta = time - this.time;\n        this.time = time;\n\n        this.updateList.update(time, delta);\n        this.effectComposer.render(delta);\n    };\n\n    private readonly setSize = () => {\n        this.input.setSize(window.innerWidth, window.innerHeight);\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.effectComposer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    private load() {\n        let loading = 1;\n        const gltfLoader = new GLTFLoader();\n        const textureLoader = new THREE.TextureLoader();\n\n        loading++;\n        gltfLoader.load(\"/arrow.glb\", ({scene}) => {\n            this.arrowModel = scene.children[0] as THREE.Mesh;\n            fixMaterials(this.arrowModel);\n            this.onLoadComplete();\n        });\n\n        for(const {img} of people) {\n            loading++;\n            if(img.endsWith(\"mp4\")) {\n                const video = document.createElement(\"video\");\n                video.style.display = \"none\";\n                video.autoplay = true;\n                video.loop = true;\n                video.crossOrigin = \"anonymous\";\n                video.src = img;\n                video.onloadeddata = () => {\n                    this.loadedTextures.set(img, new THREE.VideoTexture(video));\n                    this.onLoadComplete();\n                };\n                document.body.appendChild(video);\n                video.load();\n            }\n            else {\n                textureLoader.load(img, texture => {\n                    this.loadedTextures.set(img, texture);\n                    this.onLoadComplete();\n                });\n            }\n        }\n\n        textureLoader.load(\"/deelon_darker.png\", texture => {\n            this.loadedTextures.set(\"/deelon_darker.png\", texture);\n            this.onLoadComplete();\n        });\n\n        this.setState({loading: 0, maxToLoad: loading});\n    }\n\n    private onLoadComplete() {\n        this.setState(({loading, maxToLoad}) => {\n            loading++;\n            return {loading, loaded: loading === maxToLoad};\n        });\n    }\n\n    private clickToStart = () => {\n        this.init(this.ref as HTMLDivElement);\n        this.setState({started: true});\n    };\n\n    private init(r: HTMLDivElement) {\n        window.addEventListener(\"resize\", this.setSize, false);\n        this.setSize();\n\n        this.effectComposer.addPass(this.renderPass);\n        this.effectComposer.addPass(this.bloomPass);\n        this.effectComposer.addPass(this.aaPass);\n\n        this.renderer.setClearColor(0x000000, 1.0);\n\n        this.camera.position.set(0, 50, 0);\n        this.camera.lookAt(0, 0, 0);\n\n        const labelDiv = document.createElement(\"div\");\n        labelDiv.style.position = \"relative\";\n        labelDiv.style.width = \"100%\";\n        labelDiv.style.height = \"100%\";\n        this.labelDiv = labelDiv;\n        r.appendChild(labelDiv);\n\n        const positionsUsedSoFar: THREE.Vector3[] = [];\n        for(const {img, quotes, message} of people) {\n            const texture = this.loadedTextures.get(img) as THREE.Texture;\n            let position = new THREE.Vector3();\n            let iterations = 0;\n            do {\n                const theta = THREE.Math.randFloat(-2 * Math.PI, 2 * Math.PI);\n                const radius = THREE.Math.randFloat(110, 150);\n                const phi = Math.PI / 2;\n                position.setFromSphericalCoords(radius, phi, theta);\n                iterations++;\n            } while(positionsUsedSoFar.some(p => p.distanceToSquared(position) < 40 * 40) && iterations < 100);\n            positionsUsedSoFar.push(position);\n            const created = this.updateList.create(Enemy, position, texture, this.player, labelDiv, this.nodes, {\n                quotes: quotes,\n                health: 200,\n                randomStartingAttack: true,\n                onDie: this.onDie\n            });\n            this.quoteMap.set(created, message);\n        }\n\n        this.updateList.create(Arrow, this.player.mesh, this.arrowModel as THREE.Mesh, this.nodes);\n\n        this.scene.add(this.camera, this.lightAmbient);\n\n        r.appendChild(this.renderer.domElement);\n\n        this.animate();\n    }\n\n    private readonly onDie = (enemy: Enemy) => {\n        this.updateList.globals.pause = true;\n\n        const message = this.quoteMap.get(enemy);\n        if(message) {\n            setTimeout(() => {\n                this.setState(state => {\n                    const count = state.count + 1;\n                    const newState: Partial<AppState> = {\n                        message, count\n                    };\n                    return newState as AppState;\n                });\n            }, 2000);\n        }\n\n    };\n\n    private readonly onCloseClicked = () => {\n        this.updateList.globals.pause = false;\n\n        this.setState(state => {\n            const {count} = state;\n            const newState: Partial<AppState> = {\n                message: null\n            };\n            if(count === people.length) {\n                newState.length = state.length + 1;\n                const enemy = this.updateList.create(Enemy, tempVec1.set(0, 0, 100), this.loadedTextures.get(\"/deelon_darker.png\") as THREE.Texture, this.player, this.labelDiv as HTMLDivElement, this.nodes, {\n                    quotes: [\"\", \"\"],\n                    boss: true,\n                    health: 1200,\n                    switchAttacks: true,\n                    switchAttackTime: new Range(5, 10),\n                    startingAttack: AttackMode.Round,\n                    onDie: this.onDie\n                });\n                this.quoteMap.set(enemy, deelon);\n            }\n            return newState as AppState;\n        });\n    };\n\n    private shutdown() {\n\n    }\n\n    private readonly setRef = (r: HTMLDivElement) => {\n        if(r) {\n            this.ref = r;\n            this.load();\n        }\n        else {\n            this.shutdown();\n        }\n    };\n\n    render() {\n        const {message, count, length, loaded, loading, maxToLoad, started} = this.state;\n        return (\n            <div className=\"app\" ref={this.setRef}>\n                <Overlay onCloseClicked={this.onCloseClicked}>\n                    {message}\n                </Overlay>\n                <div className=\"count\">{count}/{length}</div>\n                <div className={\"loading-overlay \" + (started ? \"hide-animate loading-overlay-done\" : (loaded ? \"loading-overlay-loaded\" : \"\"))} onClick={!loaded ? undefined : this.clickToStart}>\n                    {!loaded ?\n                        `Loading: ${(loading / maxToLoad) * 100} %` :\n                        <>\n                            WASD to move, left click to shoot, aim with mouse.\n                            <br/>\n                            <br/>\n                            Click to start\n                        </>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction fixMaterials(object: THREE.Object3D) {\n    object.traverse(object => {\n        if(object instanceof THREE.Mesh) {\n            if(Array.isArray(object.material)) {\n                object.material = object.material.map((m: THREE.Material & {color? : THREE.Color}) =>\n                    new THREE.MeshBasicMaterial({color: m.color ? m.color : 0x666666})\n                )\n            }\n            else {\n                const m = (object.material as THREE.Material & {color? : THREE.Color});\n                object.material = new THREE.MeshBasicMaterial({\n                    color: m.color ? m.color : 0x666666\n                });\n            }\n        }\n    });\n}\n\n","import React from 'react';\r\n\r\nexport function Tyler(props: {}) {\r\n    return (\r\n        <div className=\"tyler\">\r\n            <h2>Tyler</h2>\r\n            <p>\r\n                I guess this is kinda a 2 for 1 combo of addressing my return and the anniversary cause I’m tying them together because it would be hard not to mention my absence in my message so ok awesome enjoy the wild ride.\r\n            </p>\r\n            <p>\r\n                So if you asked me about ovas second anniversary last week, I’d have said that I wasn’t looking forward to it. I mean sure I’d be glad that ova lasted two whole years but I knew it’s suck not being part of it.\r\n            </p>\r\n            <p>\r\n                But shockingly I’m actually here even tho I was told so many times it’d never happen and honestly I didn’t have much hope for it either but I knew I had to try cause ova meant too much to me for me not to. I know dash spoke to people about whether or not I should be allowed back, and I really just wanna take this moment to say thank you to anyone who said it’d be okay for me to rejoin, it means a lot and I’m super grateful, that includes dou, thanks for being chill about it, I really do appreciate it. I hold no grudges.\r\n            </p>\r\n            <p>\r\n                Not being in ova for 6 months made me realise how much it meant to me and how much I kinda took it, and the people in it for granted while I was here before. Like I met so many cool people here, some of my best friends are the ones I’ve met here,  I’ve had some of the best times here, and this server really did help me get through a lot of things over the last two years. Whenever I was having a hard time I’d go and hang out and talk with you guys here in ova and it was one of the only things that actually worked for me to take my mind off the bad shit. Y’all were (and have been) great friends to me over the last 2 years and I feel like meeting you guys really helped me change as a person, in many good ways which is pretty evident irl compared to a few years ago. Which I suppose is part of the reason why it was so rough being gone, past 6 months, although necessary because punishment is needed, and I needed to figure some shit out, the past 6 months is not something I ever want to go through again.\r\n            </p>\r\n            <p>\r\n                Basically what I’m trying to say that this place means a lot to me as do all of you and hopefully that’s more obvious in the future than it used to be. I know I haven’t always been good to people here but you guys have always meant a lot to me even tho I’ve been incredibly trash at showing it lmao. I hope I can be a good friend to y’all again from now on.\r\n            </p>\r\n            <p>\r\n                I really have made some fucking great friends in ova. I want to say thank you the people in the gbs server who were cool about me talking there, I liked getting to talk to you guys again after everything.\r\n            </p>\r\n            <p>\r\n                The biggest thank you tho is the one I need to say to the few people who continued to be my friend and spoke to me and was there for me over the last 6 months while I wasn’t in ova. You guys were my friend when everything was kinda  fucking shit and I really appreciate you and am so grateful to you, you have no idea how glad I’ve been to have you guys as my friends, you kept me somewhat sane lmao so thank you. And I got to know you better and like I got to know you guys much better than I did when I was actually in ova so that was super great, you know who you are.\r\n            </p>\r\n            <p>\r\n                Thank you to Dash and Zack for being owner and co-owner over the last 6 months, clearly one of my better decisions was handing ova over to you guys specifically and I know you’ll keep doing a good shit, you guys were definitely the ones for the job.\r\n            </p>\r\n            <p>\r\n                It really is fucking great to be back. I’m glad this place has lasted two years, after all the shit it’s still going and that’s pretty damn cool. See you cunts for another long essay next year, maybe I’ll be reading it in vc cause I’m sure as fuck not going another year without talking in vc lmao this typing shit is old news.\r\n            </p>\r\n            <p>\r\n                Anyway thanks for sticking together for two years. People come and go and return but this place sticks around and I couldn’t be more glad. Y’all cool ok bye.\r\n            </p>\r\n            <p>\r\n                -Tyler\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Cal(props: {}) {\r\n    return (\r\n        <div className=\"cal\">\r\n            <h2>Cal</h2>\r\n            <p>\r\n                OVA 2nd Anniversary: Judgement Day\r\n            </p>\r\n            <p>\r\n                First of all, here's to another year.<br/>\r\n                I... don't really know what else to say. I mean, we've had our ups and downs. DnD has become a thing. SL is slowly creeping back into our minds.<br/>\r\n                The server will be more alive since Christmas Break will soon become a thing. I guess I should thank you all for putting up with my bullshit most of all, since<br/>\r\n                Lord help me I'm almost always back on my bullshit. Notable events since the last anniversary:<br/>\r\n                - DnD started<br/>\r\n                - Tyler left (and came back)<br/>\r\n                - Dou left (and came back)<br/>\r\n                - Zack left (and came back)<br/>\r\n                Anyway, after this thrilling list of events we should get to the honorable mentions list of people:<br/>\r\n                - Supper Rad<br/>\r\n                - Mutebrogen<br/>\r\n                - Any Gay Five ten<br/>\r\n                - Vose<br/>\r\n                - Cray Sontelov<br/>\r\n                - Shuegay<br/>\r\n                - Say 'Sayo-nara' to Gibraltar you Spanish fucks<br/>\r\n                - Yashee<br/>\r\n                - Deelean<br/>\r\n                - Zacquery aka Momando<br/>\r\n                - Zach<br/>\r\n                - InfectedBoldAndBrash<br/>\r\n                - Do Weed<br/>\r\n                and last but not least<br/>\r\n                whoever the fuck is reading this who I haven't mentioned\r\n            </p>\r\n            <p>\r\n                you're all cool but you're all also pretty fucking gay<br/>\r\n                Anyway let's try to not let drama consume us for another year.<br/>\r\n                Calzone out.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Aegwynn(props: {}) {\r\n    return (\r\n        <div className=\"aeg\">\r\n            <h2>Aegwynn</h2>\r\n            <p>\r\n                top text\r\n            </p>\r\n            <p>\r\n                here's a good way to sum up how i feel about this anniversary. i still have that old text file from last year saved. i read it sometimes, mulling over how i could have wrote it better or given it more thought. i end up wondering how everyone is doing, and what they think of me now. and then i finish that train of thought with all the guilt that i never made things better, i never got a chance to be a better me around you all.\r\n            </p>\r\n            <p>\r\n                it feels like i wrote that message yesterday. i could remember all the tears and the twinges in my chest as i laid in bed like i am now thinking about a server of people i wanted to make good, yet i never bothered to improve.\r\n            </p>\r\n            <p>\r\n                come this time next year, i want to have a year's worth of memories between now and then. i'm gonna stay for good this time, and make sure i dont miss another moment with yall.\r\n            </p>\r\n            <p>\r\n                i really love you guys. i hope it's not too much trouble if i stick around. hopefully next time i write one of these i'll be able to thank you all for a great year.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function AnyKey13(props: {}) {\r\n    return (\r\n        <div className=\"any\">\r\n            <h2>Any</h2>\r\n            <audio src=\"/any.mp3\" controls={true}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Blocky(props: {}) {\r\n    return (\r\n        <div className=\"blocky\">\r\n            <h2>Blocky</h2>\r\n            <p>\r\n                Heya, this is Yuri Red or Blocky or whatever you call me.\r\n            </p>\r\n            <p>\r\n                I just like to say thank you to everyone for the past 2 years. Usually, when I join a community group. Usually, I either get disinterested where I would leave or drama happens where I just leave and move on. But with you guys at the OVA, it wasn’t like that at all. Despite everything that happened to us and how much inactive I was in certain events I wasn’t there for. I am still here talking to y’all and having fun no matter what. To think we started off from DDLC’s reddit discord group and become one of the most greatest personal group I’ve ever been in.\r\n            </p>\r\n            <p>\r\n                I know I haven’t been there for some stuff and that maybe I should least talk more about myself or get more involved. Or maybe I should actually try writing down puns for once. But nonetheless, you guys were always there for me and hopefully I can be there for you too.\r\n            </p>\r\n            <p>\r\n                Here are some people I like to talk about a bit for the past two years.\r\n            </p>\r\n            <p>\r\n                <b>Sayo</b>: You’re a person whom I sometimes hate and love at the same time (no homo). But despite that, you’re a great friend worth hanging out with and I hope we can hang around more in the future. I wish you luck in whatever life problem that will get in the way. Also, I still appreciated for helping me in one of my essays for my past college.\r\n            </p>\r\n            <p>\r\n                <b>Snow/Shu</b>: You’re a very talented artist and you continue to amaze me on how much you improved on ya art. Continue to be kind to others my friend and never lose the passion for the things you love. I would also like to thank you for making me become interested in Danganronpa last year and it was an experience I’ll never forget. Follow your dreams and I am sure you will have a great job as an artist. Keep up the good work!\r\n            </p>\r\n            <p>\r\n                <b>Supa</b>: You’re one of the most sweetest people I’ve met on the OVA and had some things in common too. We even used to live in the same state until I moved away unfortunately. However, continue to spread your kindness to others and never forget the great times you have with us at the OVA.\r\n            </p>\r\n            <p>\r\n                <b>Vase</b>: At first, I thought you were one of those very insensitive guys who tried to be cool. But the more I see about you over the years and the time we spent together on discord or twitter. I realized that you are more than that and I think you’re a pretty great guy worth talking to. I’m grateful for all the fun times we had together my man. I hope we continue to talk more to each other again on discord or outside of discord.\r\n            </p>\r\n            <p>\r\n                <b>Kray</b>: I know you see me as some supid annoying person who makes unfunny jokes and wish that I should be in the gulag. But even so, I think you’re cool guy who sometimes make me laugh when it comes to communism jokes. Overall, you’re someone that people could look up too and I can respect that. Hopefully, we can talk more to each other so that you won’t see me as someone annoying or not funny.\r\n            </p>\r\n            <p>\r\n                <b>Any</b>: You’re a swell guy any. I like the passion you have on certain topics you love to talk about and you’re one of the funniest guys I’ve met on OVA too. I can also relate to you lot since we both have disabilities that affects our way of living sometimes but despite so, I believe as long we keep doing our best. We would have a future worth looking towards. Keep being yourself and I’ll continue to support you from the sidelines.\r\n            </p>\r\n            <p>\r\n                <b>Cell</b>: You may or may not be in the OVA anymore. But I just want you to know that you were a great mod and I remember how funny you were during our time here together. So wherever you are, don’t let life take a dump on you and continue to move on forward with all the good memories we spend together.\r\n            </p>\r\n            <p>\r\n                <b>Cake</b>: I remember that you were a weirdo but you were our weirdo. You know what I mean? I thought you and vase made a great duo last year and that you can be a great and funny person as well. I know life can be harsh and that there were things you regret wishing that would had never happened. But nonetheless, me and all the others at OVA will always like you and hope that wherever you were. Keep being the best person you can be.\r\n            </p>\r\n            <p>\r\n                <b>Dou</b>: I don’t know if we had talked a lot to each other lately. But I really think you’re an awesome friend that loves to have fun with Sayo and the rest of us. I know that back on those past months or last year, you have an awful experience about yourself and others around you. And all of that was behind the scenes. It must have been pretty tough on you and I wished some of that could have been prevented. Nonetheless, I think things are starting to work out for you in the end and you can finally move on to something better. I can respect that and hope we can talk more to each other in the future too.\r\n            </p>\r\n            <p>\r\n                <b>Zack</b>: We may not talked much to each other. But like most people from the OVA, I remember you being such a kind guy who loves to talk about the games we like together including smash brothers too. Someday, when I ever have a Nintendo Switch and Smash Ultimate in the future. I hope that I can play online with ya where we can have some fun on the things we love. Also, no matter how rough life can be. We will cheer from the OVA for ya, don’t forget that.\r\n            </p>\r\n            <p>\r\n                <b>Tyler</b>: I know we haven’t talked to each other a lot and I kinda wished that I should have known you more. But even though you made some pretty bad mistakes over these past few months. I can only hope you can try your best to become a better person than the person you used to be. It’s not too late to forgive yourself yet. Just know that sometimes, you don’t need a boyfriend to love you. I think you just need someone who can be your best friend and appreciate who you are. Don’t force yourself and try to take all the steps at once. Just take things slowly and I believe you will have a life that you can look back on. Also I’ll always remember the fun times we have together with you even if some of it were dumb shit. I just hope you learn from your mistakes and never let anyone go on the path you’re going through.\r\n            </p>\r\n            <p>\r\n                <b>Mute</b>: You’re also a good friend that people would love to talk with too. I don’t know if I remembered that much from our interactions together.I blame my short-term memory for that. However, I do remember the fun times we played SL together and how we once comforted you on the vent stuff too I think. So whatever you are doing right now, I hope you’re doing well.\r\n            </p>\r\n            <p>\r\n                <b>Zach</b>: Again, I don’t know if we had talked that much either. But I remember you took an interested in programming and that’s great! You should continue to be interested in that so that you could become a great video game programmer in the future! I hope you continue your passion on the things you love.\r\n            </p>\r\n            <p>\r\n                <b>Dash</b>: I remember you were very weird and that you were interested in some weird stuff. But it doesn’t mean you aren’t a great friend and an admin. In fact, you were one of the best I’ve seen because you kept the server stable and I don’t think I’ve ever seen you having trouble with us that much at the OVA. So keep doing the best of work my friend.\r\n            </p>\r\n            <p>\r\n                <b>Cal</b>: Once again, not sure if we have talked that much. But I know that you’re also a cool dude too. So wherever you are doing, I hope you are doing well and having a good time of your life my dude.\r\n            </p>\r\n            <p>\r\n                <b>Deelon</b>: Despite everything, you remain as one of the most nicest people I’ve ever met on the OVA and sometimes I wish I could have been nice as you too. So like always, always continue to spread kindness even to complete strangers. Because who knows? People will always lend a hand to you back whenever you are in trouble or need some help. Always be yourself.\r\n            </p>\r\n            <p>\r\n                <b>Nee</b>: We might not talk much and you may think I’m just some dude who makes unfunny shit. But I know we have some good times together when we all played SL and that counts as much of having a good time. So maybe in the future, I hope we can get to know each other as pals.\r\n            </p>\r\n            <p>\r\n                <b>Singy</b>: As fellow asians. You’re an awesome my man. Even though you’re younger than me, you can make such good sprite animations or even animations in general. That’s great! Not only that, out of everyone else in the OVA. I think you’re the only one that doesn’t mind the stupid unfunny jokes I said over these past months lmao. Life will get tough but as long you have people like us as friends in your life, push forward with all you got and reach for any goal you want to reach. I honestly hope you have a good future with an awesome job stingy. Keep going towards life.\r\n            </p>\r\n            <p>\r\n                <b>Aegwynn</b>: I’ll thought I save this for last. But regardless if you aren’t in OVA anymore or maybe you are right now. I cannot thank you enough for introducing me into the OVA and meeting all these wonderful people. If I haven’t met you back in the SilvaGunner fan server back in 2016, I don’t think I would ever have a chance to be apart of the OVA and learn so much from them too. Heck, if I never joined the DDLC Reddit server or joined in too late. I would never even meet anyone from the OVA at all. I know you think that you’re not important to other people due to how shitty your life is or how many people you might have pissed off on the internet. It doesn’t matter because I couldn’t thank you enough for creating the OVA server for us and leading for all of us to know each other and have fun for better or worse. I also think that you’re honestly still a valid and good person as well despite everything. Just don’t let people on your life use you as a doormat or bully you like trash. If you ever tell yourself that you never did anything impactful in your life, I will tell you otherwise. You're much stronger and better than you think you are. Thanks for everything, I wish you good luck my friend.\r\n            </p>\r\n            <p>\r\n                <b>As for everyone else I didn’t mention</b>: I don’t know if I had talked with anyone else in the OVA too but I wish you a happy new year for the next decade and beyond too!\r\n            </p>\r\n            <p>\r\n                Once again, thank you everyone in the OVA for these past two years and hopefully I’ll get more involved next time if my life doesn’t shit on me either. I hope we can still all talk to each other for even two more years to come or even if OVA ever were to die. Until then, make yourself and everyone around you smile. I wish you all the best of times my friends!\r\n            </p>\r\n            <img src=\"/blocky_end.png\" alt=\"Make everyone smile!\"/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Dash(props: {}) {\r\n    return (\r\n        <div className=\"dash\">\r\n            <h2>Dash</h2>\r\n            <p>\r\n                Today is the second year anniversary of the OVA!\r\n            </p>\r\n            <p>\r\n                I just wanted to take this time to thank each and every one of you. Without you, this little community would not be the charming place that it is. I love all of you, and thank you all for being here \t&lt;3\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Mark(props: {}) {\r\n    return (\r\n        <div className=\"mark\">\r\n            <h2>Mark</h2>\r\n            <audio src=\"/mark.mp3\" controls={true}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Mute(props: {}) {\r\n    return (\r\n        <div className=\"mute\">\r\n            <h2>Muteogen</h2>\r\n            <p>\r\n                alright fellas listen up<br/>\r\n                i suck ass at writing these things and i've been thinking about it all day and im just gonna fucking wing it alright here goes\r\n            </p>\r\n            <p>\r\n                you all have been a big part of my life for like 2 years now, its through ova that i've met tons of fantastic people who i love to talk to and i dont know what i'd be doing without yall<br/>\r\n                you guys have helped me through the absolute toughest times in my life and i mean that shit sucks rn but having you all there for me really helps. so yeah im a big dumb emotional baby and i suck at coming up with a meaningful paragraph but since im completely winging this know it comes straight from the heart.<br/>\r\n                special shoutouts to calmaxys for always being there and supa for being my fucking brother or something<br/>\r\n                and last but not least special thanks to you, yeah you the person reading this, you're fuckin cool as shit.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Neel(props: {}) {\r\n    return (\r\n        <div className=\"neel\">\r\n            <h2>Neelarai</h2>\r\n            <p>Yo SL was sick when are we doing it again?</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Snow(props: {}) {\r\n    return (\r\n        <div className=\"snow\">\r\n            <h2>Snow</h2>\r\n            <p>\r\n                thank you all<br/>\r\n                from the top and bottom of my heart for a good 2 years heer<br/>\r\n                it honestly felt like longer than 2 years, really<br/>\r\n                feels like ive known you guys for way longer, and you all are special and dear to me<br/>\r\n                ova from the start and to now has always been a calm place where i feel free to talk about anything with everyone willing to hear as i can do the same for others<br/>\r\n                ik lately i havent been on much here but i still love to visit here a lot daily/sometimes lurk lol akjdslksdf<br/>\r\n                im too lazy to write personal responses for everyone here since i just dont want to leave anyone out or give out small messages to ppl which seems like some biased as hecc shiz so i want to keep this message to be for uh everyone yes i can english<br/>\r\n                thank you all for being my friend and im glad you all are my friends as well<br/>\r\n                youre all so thoughtful, caring, funny, unique in your own amazing ways<br/>\r\n                ive had a bad day today but then i remembered oh shit ova anniversary and it made me think about all the events up until now and it made my lift up a lot<br/>\r\n                shit srry if i broke any rules and i shouldve sent it to someone who has access in that channel up there but aaaa i should go back to hw and cry a bit cuz ur all so rad and idk if any of u might read this but thankies if u did read this now im outtt<br/>\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Sticky(props: {}) {\r\n    return (\r\n        <div className=\"sticky\">\r\n            <h2>Sticky</h2>\r\n            <video src=\"/sticky.mp4\" autoPlay={true} loop={true}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Supa(props: {}) {\r\n    return (\r\n        <div className=\"supa\">\r\n            <h2>Supa</h2>\r\n            <p>\r\n                Ey fellas\r\n            </p>\r\n            <p>\r\n                Im bad at putting my thoughts down and stuff, but here I go anyways. Basically y'all are fuckin great. I'll be fully honest when I say you all are some of the best damn friends I've ever had. I'm a sappy bitch but there's literally nothing I look forward to quite as much as hanging out with you guys, whenever we just talk on discord or play games or otherwise. Y'all are genuinely the fucking nicest, funniest, and coolest people I've ever met. Playin games with you guys is a total blast and every dumb moment we have in SL and L4D2 sticks in my mind as some of the most fun I've ever had. I'm not gonna meme it up as much right now, just gonna say fully from the heart, you guys are awesome, and I'm really glad to call you all my friends, its been a fucking great 2 years and I'm looking forwards to all the bullshit we do in the future. Love y'all no homo.\r\n            </p>\r\n            <p>\r\n                sl when\r\n            </p>\r\n            <p>\r\n                -Supa\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Vase(props: {}) {\r\n    return (\r\n        <div className=\"vase\">\r\n            <h2>Vase</h2>\r\n            <p>\r\n                Dear <mark>Whores</mark>,\r\n            </p>\r\n            <p>\r\n                I <mark>don’t</mark> remember how I wrote this last year, but it was probably <mark>lame. Since</mark> last year<mark>’s anniversary</mark> a lot of things have happened, <mark>like Tyler fucking up in the biggest way imaginable, then returning as if</mark> nothing ever happened somehow. That’s pretty much everything notable that’s happened, actually.\r\n            </p>\r\n            <p>\r\n                After a short summary of the year, comes the part where I discuss my feelings, so let’s get to the point. You’re all people that I have talked to at least once, I think. As such, I can safely say that I think <mark>most of</mark> you are cool <mark>(the ones that I don’t consider cool I will not name, because I’m not a meanie, but some of you can really suck it like DAMN), except Tyler and some others.</mark> I’ve enjoyed talking to you, even though I did that considerably less this year.\r\n            </p>\r\n            <p>\r\n                If I don’t drop some names then this text will really be too short so here are some notable names: Sayororonoa, Super red, Mutegen, Joe, Steven Davids (remember this name), that guy I forgot his name I think it was something like stinky fingers, anykey_12, Joshi, Zac, <mark>Zaq</mark> and other such spellings, my boy who got a gf (Calmaskys), D<mark>DD</mark>DDD<mark>D</mark>DDDD<mark>DDD</mark>D, <mark>Delon</mark> and last but not least, Shoe\r\n            </p>\r\n            <p>\r\n                I hope you’ve noticed that I’ve been getting progressively less funny as time goes on, because I’ve gone from like -1<mark>5</mark> laughs per sentence, to at least -<mark>95</mark>2<mark>x</mark>, <mark>x being the biggest number one can imagine</mark>. So before I become even less funny, I just want to say, from the depth of my heart, <mark>SHUT THE FUCK UP</mark>\r\n            </p>\r\n            <p>\r\n                I would also like to thank Zach or Zack<mark> or Zaq or whatever</mark> for DM’ing our DnD sessions because that’s a lot of fun most of the time, even though he’s on break now, the memory remains.\r\n            </p>\r\n            <p>\r\n                Let’s talk about another thing that remains<mark>, my hatred for</mark> you. <mark>My hatred for you</mark> all never leave<mark>s, it</mark> only grow<mark>s</mark>. Like, GOD, please<mark> shut the FUCK up already you fucking losers</mark>. Like a JoJo fan running to<mark> suck an unsucked cock, I want to escape from this bullshit called</mark> OVA.\r\n            </p>\r\n            <p>\r\n                Now, there is one person I haven’t thanked.<mark> The one person that keeps me in OVA, even though I hate literally everyone in it.</mark> That is, the waifu bot. I would like to thank the waifu bot for keeping me sending messages in OVA, <mark>even if they don’t really bring anything to the conversation because I’m just rolling png’s. At least</mark> I have Kira and Usopp.\r\n            </p>\r\n            <p>\r\n                I want to thank one more person, that person is someone I hold dear. I truly care about them and consider them a good friend, <mark>among all the unlikeable whore fuckfricks in OVA,</mark> and that is <mark>Vase. Did you know that the V in</mark> OVA<mark> stands for Vase? I don’t think it does but now it does. Vase is</mark> such a beautiful <mark>man/vase</mark> it makes me cry, I think about how brilliant and funny he is whenever I go to sleep. I cry about how I will never be as good as him, because he is the Roman goddess Minerva(se).\r\n            </p>\r\n            <p>\r\n                Within this entire, massive epic, you probably didn’t expect there to be a single serious sentence. Well you’ll be surprised. Eventually.\r\n            </p>\r\n            <p>\r\n                Now, it is time for a moment of silence for the fallen. I hope you all remembered the name Steven Davids. Steven Davids, he was a <mark>good</mark> man, he was indeed what you would call, a <mark>fucking dumbass</mark> child. But we loved Steven, and we are sad to see him become just a shell of his former self, and we are even sadder to see him never come back (pensive emoji).<br/>\r\n                UPDATE: He came back earlier today but <mark>after seeing Tyler he did the logical thing and</mark> left again.\r\n            </p>\r\n            <p>\r\n                Speaking of Tyler, <mark>it’s really weird how</mark> she <mark>basically did some terrible</mark> really<mark> goddamn bad shit and came back like it never</mark> happened. <mark>She just took a short break and now she’s back in OVA to be an e-girl and a whore like she used to,</mark> good for her! But what’s <mark>not</mark> good is that you people said yes to her coming back (not unexpected though).\r\n            </p>\r\n            <p>\r\n                We might be nearing the finish line, <mark>but don’t</mark> cry on me, for everything good must come to an end, and so must this beautiful, tear-jerking story. I would actually like to sincerely and truthfully thank <mark>most of</mark> you for everything you’ve done for me. You’ve helped me through when I felt bad, I’m never serious about anything so you probably didn’t even know, but you really have. So thank you.\r\n            </p>\r\n            <p>\r\n                As the paragraphs go by, I realise I should probably end this soon, but I have extended it so far I can’t find a logical place to end it. So I just want to thank the entire collective known as OVA for teaching me to love myself, because I could’ve turned out far worse.\r\n            </p>\r\n            <p>\r\n                Sincerely, Vase~\r\n            </p>\r\n            <p>\r\n                P.S. I usually don’t play favourites but Sayorora >>>>>>>>>>>>>>>>>\r\n            </p>\r\n            <p>\r\n                P.P.S Parts of this document were deemed to be in violation of general directive P3-91 issued by Premier of the Soviet Union Joseph Stalin, Section 6, Paragraphs 18, 25, 28, and 118, and have been modified for your convenience.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Deelon(props: {}) {\r\n    return (\r\n        <div className=\"deelon\">\r\n            <h2>Deelon</h2>\r\n            <p>\r\n                Coming soon ;)\r\n            </p>\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}